{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Pylnbits Docs These docs for the pylnbits library are auto generated. For full documentation on how they were generated, visit mkdocs.org . How To Guides Visit the How To Guide on how to use the pylnbits library for how to install, configure and connect to pylnbits API using sample code. If you are not yet familiar with LNBits, please visit lnbits.com. Reference This part of the project documentation focuses on an information-oriented approach. It is a reference for the technical implementation of the pylnbits project code. Project layout Source: https://github.com/lightningames/pylnbits mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. config_sample.yml pylnbits/ __init__.py config.py lndhub.py lnurl_p.py lnurl_w.py user_manager.py user_wallet.py utils.py tests/ __init__.py test_lndhub.py test_lnurlp.py test_lnurlw.py test_usermanager.py test_userwallet.py MK Docs notes","title":"Pylnbits Docs"},{"location":"#welcome-to-pylnbits-docs","text":"These docs for the pylnbits library are auto generated. For full documentation on how they were generated, visit mkdocs.org .","title":"Welcome to Pylnbits Docs"},{"location":"#how-to-guides","text":"Visit the How To Guide on how to use the pylnbits library for how to install, configure and connect to pylnbits API using sample code. If you are not yet familiar with LNBits, please visit lnbits.com.","title":"How To Guides"},{"location":"#reference","text":"This part of the project documentation focuses on an information-oriented approach. It is a reference for the technical implementation of the pylnbits project code.","title":"Reference"},{"location":"#project-layout","text":"Source: https://github.com/lightningames/pylnbits mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. config_sample.yml pylnbits/ __init__.py config.py lndhub.py lnurl_p.py lnurl_w.py user_manager.py user_wallet.py utils.py tests/ __init__.py test_lndhub.py test_lnurlp.py test_lnurlw.py test_usermanager.py test_userwallet.py","title":"Project layout"},{"location":"#mk-docs-notes","text":"","title":"MK Docs notes"},{"location":"explanation/","text":"Explanation The purpose of the pylnbits library is to enable accelerated access to the LNBits API, by packaging commonly used methods, and so that app developers can write less code. Visit lnbits.com for more information on the parent project.","title":"Explanation"},{"location":"explanation/#explanation","text":"The purpose of the pylnbits library is to enable accelerated access to the LNBits API, by packaging commonly used methods, and so that app developers can write less code. Visit lnbits.com for more information on the parent project.","title":"Explanation"},{"location":"how-to-guides/","text":"How To Guides This is a brief guide on how to use the pylnbits library. First create an an account on your LNBits instance by visiting the main page and naming your wallet. Be sure to bookmark the link to be able to get access in the future. If you are not familiar with LNBits, please take the time to familiarize yourself with how user accounts work and how invoices are created and paid on LNBits first. Next, click on enable extensions in the side navigation bar on your LNBits account. Enable the extensions that you want to use. Extension use is optional , and is not required for generating invoices or receiving payments. The pylnbits library currently only supports the following extensions from LNBits : User Wallet User Manager LNURLp LNURLw LndHub Getting Started Use version at least python3.8 Install from source git clone https://github.com/lightningames/pylnbits cd pylnbits python3 -m venv venv source venv/bin/activate pip install -r requirements.txt pip install -e . Release Note current pylnbits release is 0.0.3 It is only effective up to LNBITS commit https://github.com/lnbits/lnbits-legend/commit/e46e881663eb4d70b691e09ac1c97eecd6b547b8 PyPi release https://pypi.org/project/pylnbits/ pip install pylnbits Set up your Config In your LNBits account, click on the API info tab. You should see Wallet ID, Admin Key and Invoice/read key . First create a config.yml file, copy the Keys from LNBits with your values. There is a sample config_sample.yml file in the pylnbits source directory. config.yml lnbits_url: \"https://<your lnbits domain here>\" # api_key from LNbits User Manager Extension in_key: \"<your Invoice Key here>\" admin_key: \"< Your Admin Key here>\" Example Code Sample code for user wallet The following is sample code that uses config.yml in your current directory for calling methods from the LNURLp extension. This Example code runs test for the following: INITIALIZE the pylnbits with your config file GET wallet details CHECK an invoice payment hash CREATE an invoice PAY an invoice (Bolt11) Replace the sample data with your data, e.g. bolt and payment_hash variables import asyncio from aiohttp.client import ClientSession from pylnbits.config import Config from pylnbits.user_wallet import UserWallet async def main(): # INITIALIZE the pylnbits with your config file c = Config(config_file=\"config.yml\") url = c.lnbits_url print(f\"url: {url}\") print(f\"headers: {c.headers()}\") print(f\"admin_headers: {c.admin_headers()}\") async with ClientSession() as session: # GET wallet details uw = UserWallet(c, session) userwallet = await uw.get_wallet_details() print(f\"user wallet info : {userwallet}\") # CHECK an invoice payment hash payment_hash = \"edefef3766537446c70e51af9b414fb3b319baf515f1ff9852c0289eae3665a1\" res = await uw.check_invoice(payment_hash) print(f\"check invoice response: {res}\") # CREATE an invoice res = await uw.create_invoice(False, 150, \"testcreatetwo\", \"http://google.com\") print(f'\\nCreate invoice RESPONSE: {res}\\n\\n') # PAY an invoice - add balance and check # replace the bolt below with your bolt11 bolt = \"lnbc800n1ps23r2dpp5ahh77dmx2d6yd3cw2xheks20kwe3nwh4zhcllxzjcq5fat3kvkssdqsd9h8vmmfvdjk7mn9cqzpgrzjq02snzwz4petaly54yzjkm358rqa5as9hkgydjvxxmvlpuk6dfd9cz0y2cqq0qsqqyqqqqlgqqqqqqgq9qsp5cut63ftfcffwkrr2w9r50w5e40m93k3er75mc70ysxps7yercs9s9qyyssqs7qk3cz97nm5m6ehzedcxhttx87l7x5kk38gvwkzzv4lhrhddtqq3sk43nnvsddagf36ledw9vhlpqxuu5s53pj6sz926mwqxf8chsgp2m9j8w\" # noqa body = {\"out\": True, \"bolt11\": bolt} res = await uw.pay_invoice(True, bolt) print(res) loop = asyncio.get_event_loop() loop.run_until_complete(main()) For more details on what values need to be passed in for the methods, check the LNBits API docs, which should be located on the LNBits site below your LNBits Admin and Invoice Key. Expand the tabs for more LNBits API info Sample code for LNURLp The following is sample code that uses config.yml in your current directory for calling methods from the LNURLp extension # test lnurlp pay link import asyncio from aiohttp.client import ClientSession from pylnbits.config import Config from pylnbits.lnurl_p import LnurlPay # Example code for testing LNURLp async def main(): c = Config(config_file=\"config.yml\") url = c.lnbits_url print(f\"url: {url}\") print(f\"headers: {c.headers()}\") print(f\"admin_headers: {c.admin_headers()}\") async with ClientSession() as session: lw = LnurlPay(c, session) # list links links = await lw.list_paylinks() print(\"list all links: \" , str(links), \"\\n\\n\") # get pay link pay_id = links[0]['id'] print(f'pay_id for get_link: {pay_id}') getlink = await lw.get_paylink(pay_id=str(pay_id)) print(\"get pay link: \", str(getlink), \"\\n\") # create pay link body = {\"description\": \"auto pay link\", \"amount\": 100, \"max\": 10000, \"min\": 100, \"comment_chars\": 100} newlink = await lw.create_paylink(body=body) print(f\"create pay link with body: {body}, result link: {newlink} \\n\") pay_id = newlink['id'] # update newly created link above # all body fields are required body = {\"description\": \"update auto paylink\", \"amount\": 150, \"max\": 10000, \"min\": 100, \"comment_chars\": 100} update_result = await lw.update_paylink(pay_id=str(pay_id), body=body) print(f'update pay link with intial id: {pay_id}, body: {body} \\n result: {update_result}\\n\\n') # delete above created link delete_result = await lw.delete_paylink(pay_id=str(pay_id)) print(f'delete pay link id: {pay_id}, result: {delete_result}\\n\\n') loop = asyncio.get_event_loop() loop.run_until_complete(main()) More Examples More example code can be found in the tests directory as shown in the Project Layout section.","title":"How-To guides"},{"location":"how-to-guides/#how-to-guides","text":"This is a brief guide on how to use the pylnbits library. First create an an account on your LNBits instance by visiting the main page and naming your wallet. Be sure to bookmark the link to be able to get access in the future. If you are not familiar with LNBits, please take the time to familiarize yourself with how user accounts work and how invoices are created and paid on LNBits first. Next, click on enable extensions in the side navigation bar on your LNBits account. Enable the extensions that you want to use. Extension use is optional , and is not required for generating invoices or receiving payments. The pylnbits library currently only supports the following extensions from LNBits : User Wallet User Manager LNURLp LNURLw LndHub","title":"How To Guides"},{"location":"how-to-guides/#getting-started","text":"Use version at least python3.8","title":"Getting Started"},{"location":"how-to-guides/#install-from-source","text":"git clone https://github.com/lightningames/pylnbits cd pylnbits python3 -m venv venv source venv/bin/activate pip install -r requirements.txt pip install -e .","title":"Install from source"},{"location":"how-to-guides/#release-note","text":"current pylnbits release is 0.0.3 It is only effective up to LNBITS commit https://github.com/lnbits/lnbits-legend/commit/e46e881663eb4d70b691e09ac1c97eecd6b547b8","title":"Release Note"},{"location":"how-to-guides/#pypi-release","text":"https://pypi.org/project/pylnbits/ pip install pylnbits","title":"PyPi release"},{"location":"how-to-guides/#set-up-your-config","text":"In your LNBits account, click on the API info tab. You should see Wallet ID, Admin Key and Invoice/read key . First create a config.yml file, copy the Keys from LNBits with your values. There is a sample config_sample.yml file in the pylnbits source directory.","title":"Set up your Config"},{"location":"how-to-guides/#configyml","text":"lnbits_url: \"https://<your lnbits domain here>\" # api_key from LNbits User Manager Extension in_key: \"<your Invoice Key here>\" admin_key: \"< Your Admin Key here>\"","title":"config.yml"},{"location":"how-to-guides/#example-code","text":"","title":"Example Code"},{"location":"how-to-guides/#sample-code-for-user-wallet","text":"The following is sample code that uses config.yml in your current directory for calling methods from the LNURLp extension. This Example code runs test for the following: INITIALIZE the pylnbits with your config file GET wallet details CHECK an invoice payment hash CREATE an invoice PAY an invoice (Bolt11) Replace the sample data with your data, e.g. bolt and payment_hash variables import asyncio from aiohttp.client import ClientSession from pylnbits.config import Config from pylnbits.user_wallet import UserWallet async def main(): # INITIALIZE the pylnbits with your config file c = Config(config_file=\"config.yml\") url = c.lnbits_url print(f\"url: {url}\") print(f\"headers: {c.headers()}\") print(f\"admin_headers: {c.admin_headers()}\") async with ClientSession() as session: # GET wallet details uw = UserWallet(c, session) userwallet = await uw.get_wallet_details() print(f\"user wallet info : {userwallet}\") # CHECK an invoice payment hash payment_hash = \"edefef3766537446c70e51af9b414fb3b319baf515f1ff9852c0289eae3665a1\" res = await uw.check_invoice(payment_hash) print(f\"check invoice response: {res}\") # CREATE an invoice res = await uw.create_invoice(False, 150, \"testcreatetwo\", \"http://google.com\") print(f'\\nCreate invoice RESPONSE: {res}\\n\\n') # PAY an invoice - add balance and check # replace the bolt below with your bolt11 bolt = \"lnbc800n1ps23r2dpp5ahh77dmx2d6yd3cw2xheks20kwe3nwh4zhcllxzjcq5fat3kvkssdqsd9h8vmmfvdjk7mn9cqzpgrzjq02snzwz4petaly54yzjkm358rqa5as9hkgydjvxxmvlpuk6dfd9cz0y2cqq0qsqqyqqqqlgqqqqqqgq9qsp5cut63ftfcffwkrr2w9r50w5e40m93k3er75mc70ysxps7yercs9s9qyyssqs7qk3cz97nm5m6ehzedcxhttx87l7x5kk38gvwkzzv4lhrhddtqq3sk43nnvsddagf36ledw9vhlpqxuu5s53pj6sz926mwqxf8chsgp2m9j8w\" # noqa body = {\"out\": True, \"bolt11\": bolt} res = await uw.pay_invoice(True, bolt) print(res) loop = asyncio.get_event_loop() loop.run_until_complete(main()) For more details on what values need to be passed in for the methods, check the LNBits API docs, which should be located on the LNBits site below your LNBits Admin and Invoice Key.","title":"Sample code for user wallet"},{"location":"how-to-guides/#expand-the-tabs-for-more-lnbits-api-info","text":"","title":"Expand the tabs for more LNBits API info"},{"location":"how-to-guides/#sample-code-for-lnurlp","text":"The following is sample code that uses config.yml in your current directory for calling methods from the LNURLp extension # test lnurlp pay link import asyncio from aiohttp.client import ClientSession from pylnbits.config import Config from pylnbits.lnurl_p import LnurlPay # Example code for testing LNURLp async def main(): c = Config(config_file=\"config.yml\") url = c.lnbits_url print(f\"url: {url}\") print(f\"headers: {c.headers()}\") print(f\"admin_headers: {c.admin_headers()}\") async with ClientSession() as session: lw = LnurlPay(c, session) # list links links = await lw.list_paylinks() print(\"list all links: \" , str(links), \"\\n\\n\") # get pay link pay_id = links[0]['id'] print(f'pay_id for get_link: {pay_id}') getlink = await lw.get_paylink(pay_id=str(pay_id)) print(\"get pay link: \", str(getlink), \"\\n\") # create pay link body = {\"description\": \"auto pay link\", \"amount\": 100, \"max\": 10000, \"min\": 100, \"comment_chars\": 100} newlink = await lw.create_paylink(body=body) print(f\"create pay link with body: {body}, result link: {newlink} \\n\") pay_id = newlink['id'] # update newly created link above # all body fields are required body = {\"description\": \"update auto paylink\", \"amount\": 150, \"max\": 10000, \"min\": 100, \"comment_chars\": 100} update_result = await lw.update_paylink(pay_id=str(pay_id), body=body) print(f'update pay link with intial id: {pay_id}, body: {body} \\n result: {update_result}\\n\\n') # delete above created link delete_result = await lw.delete_paylink(pay_id=str(pay_id)) print(f'delete pay link id: {pay_id}, result: {delete_result}\\n\\n') loop = asyncio.get_event_loop() loop.run_until_complete(main())","title":"Sample code for LNURLp"},{"location":"how-to-guides/#more-examples","text":"More example code can be found in the tests directory as shown in the Project Layout section.","title":"More Examples"},{"location":"notes/","text":"Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. setup.py configparser awesome setup copy pipeline pre-commit hooks mypy config more mypy pyPi publishing best practices [packaging] (https://packaging.python.org/tutorials/packaging-projects/) - ALWAYS Test PyPI first before releasing on official site - TODO: Automate Version numbers in setup.py documenting - Read the Docs is nice but there are also others to consider.","title":"MK Docs"},{"location":"notes/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. setup.py configparser awesome setup copy pipeline pre-commit hooks mypy config more mypy pyPi publishing best practices [packaging] (https://packaging.python.org/tutorials/packaging-projects/) - ALWAYS Test PyPI first before releasing on official site - TODO: Automate Version numbers in setup.py documenting - Read the Docs is nice but there are also others to consider.","title":"Commands"},{"location":"reference/","text":"Reference This part of the project documentation focuses on an information-oriented approach. Use it as a reference for the technical implementation of the pylnbits project code. Modules exported by this package: config.py : where you set the LNBits user API keys for your instance of the pylnbits library user_wallet.py : handles Rest API methods for LNbits User Wallet (lnbits page where users can enable extensions) Get wallet details Create an invoice (incoming) Pay an invoice (outgoing) Check an invoice (incoming or outgoing) Decode an invoice (new) Get invoices (incoming or outgoing) (new) Get invoice(s) by memo (incoming or outgoing (new) user_manager.py : For managing multiple users on LNBits, calls Rest API methods from LNbits User Manager Extension GET users GET user (single user) GET wallets GET transactions POST wallet POST user + initial wallet DELETE user and their wallets DELETE wallet POST activate extension lnurl_p.py : For creating and managing LNURLp links, calls Rest API methods for LNbits LNURLp Pay Extension List pay links Get a pay link Create a pay link Update a pay link Delete a pay link lnurl_w.py : For creating and managing LNURLw links, handles Rest API methods for LNbits LNURLw Withdraw Extension: List withdraw links Get a withdraw link Create a withdraw link Update a withdraw link Delete a withdraw link Get hash check Get image to embed lndhub.py : for fetching admin and invoice lndhub urls UserWallet Source code in pylnbits/user_wallet.pyclass UserWallet : def __init__ ( self , config , session : ClientSession = None ): \"\"\"__init__ \"\"\" self . _session = session self . _config = config self . _invoice_headers = config . invoice_headers () self . _admin_headers = config . admin_headers () self . _lnbits_url = config . lnbits_url self . paypath = \"/api/v1/payments\" self . walletpath = \"/api/v1/wallet\" @property def config ( self ): \"\"\"config property \"\"\" return self . _config async def get_wallet_details ( self ): \"\"\" GET /api/v1/wallet Headers {\"X-Api-Key\": \"Invoice key\"} Returns 200 OK (application/json) {\"id\": <string>, \"name\": <string>, \"balance\": <int>} \"\"\" try : # upath = \"/api/v1/wallet\" upath = self . walletpath path = self . _lnbits_url + upath res = await get_url ( self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e async def check_invoice ( self , hash : str ): \"\"\" Check an invoice (incoming or outgoing) GET /api/v1/payments/<payment_hash> Headers: invoice key Returns 200 OK (application/json) {\"paid\": <bool>} \"\"\" try : # ppath = \"/api/v1/payments/\" upath = self . paypath + \"/\" + hash path = self . _lnbits_url + upath res = await get_url ( self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e async def create_invoice ( self , direction : bool , amt : int , memo : str , webhook : str ): \"\"\" Create an invoice(incoming) POST /api/v1/payments Headers {\"X-Api-Key\": \"Invoice Key\"} Body (application/json) {\"out\": false, \"amount\": <int>, \"memo\": <string>} Returns 201 CREATED (application/json) {\"payment_hash\": <string>, \"payment_request\": <string>} curl -X POST https://bits.bitcoin.org.hk/api/v1/payments -d '{\"out\": false, \"amount\": 100, \"memo\": \"poo\", \"webhook\": \"http://google.com\"}' -H \"X-Api-Key: f7f740104bba47e9ac9bb3fa.......\" # only needs Invoice/read key -H \"Content-type: application/json\" \"\"\" try : # upath = \"/api/v1/payments\" path = self . _lnbits_url + self . paypath body = { \"out\" : direction , \"amount\" : amt , \"memo\" : memo , \"webhook\" : webhook } j = json . dumps ( body ) res = await post_url ( self . _session , path = path , headers = self . _invoice_headers , body = j ) return res except Exception as e : logger . info ( e ) return e async def pay_invoice ( self , direction : bool , bolt11 : str ): \"\"\" Pay an invoice (outgoing) POST /api/v1/payments Headers {\"X-Api-Key\": \"Admin key\"} Body (application/json) {\"out\": true, \"bolt11\": <string>} Returns 201 CREATED (application/json) {\"payment_hash\": <string>} curl -X POST https://bits.bitcoin.org.hk/api/v1/payments -d '{\"out\": true, \"bolt11\": <string>}' -H \"X-Api-Key: b811bd2580a0431c96d3c4......\" # TODO: needs admin key! -H \"Content-type: application/json\" \"\"\" try : # upath = \"/api/v1/payments\" path = self . _lnbits_url + self . paypath body = { \"out\" : direction , \"bolt11\" : bolt11 } j = json . dumps ( body ) # print(f\"body: {j}\") res = await post_url ( self . _session , path = path , headers = self . _admin_headers , body = j ) return res except Exception as e : logger . info ( e ) return e async def get_decoded ( self , bolt11 : str ): \"\"\" POST /api/v1/payments/decode Body (application/json) {\"data\": <string>} Returns 200 (application/json) Headers: invoice key \"\"\" try : decode_url = self . _lnbits_url + self . paypath + \"/decode\" payload = { \"data\" : bolt11 } # res = requests.post(decode_url, json=payload, headers=self._invoice_headers) res = await post_url ( self . _session , path = decode_url , body = payload , headers = self . _invoice_headers ) return res except Exception as e : print ( \"Exception in get_decoded() \" , e ) return e # get payment hash from bolt11 async def get_payhash ( self , bolt11 : str ): \"\"\" Only returns the payment hash not entire decoded invoice \"\"\" res = await self . get_decoded ( bolt11 ) decoded = res . json () # print(decoded) if \"payment_hash\" in decoded : payhash = decoded [ \"payment_hash\" ] return payhash else : return None async def get_invoices ( self ): \"\"\" Get invoices (incoming or outgoing) GET /api/v1/payments Headers: invoice key Returns 200 OK (application/json) [{<invoices>}] \"\"\" try : # ppath = \"/api/v1/payments/\" path = self . _lnbits_url + self . paypath res = await get_url ( self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e async def get_invoicesbymemo ( self , memo : str ): \"\"\" GET /api/v1/payments?memo=<memo> Returns 200 OK (application/json) [{<invoices>}] Headers: invoice key \"\"\" try : path = self . _lnbits_url + self . paypath + \"?memo=\" + memo res = await get_url ( self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e # from lnaddress def get_payurl ( self , email : str ): \"\"\" Construct Lnurlp link from email address provided. \"\"\" try : parts = email . split ( \"@\" ) domain = parts [ 1 ] username = parts [ 0 ] transform_url = \"http://\" + domain + \"/.well-known/lnurlp/\" + username print ( \"Transformed URl: \" + transform_url ) return transform_url except Exception as e : print ( \"Exception, possibly malformed LN Address: \" + str ( e )) # from lnaddress async def get_bolt11 ( self , email : str , amount : int ): \"\"\" fail state {'reason': 'Amount 100 is smaller than minimum 100000.', 'status': 'ERROR'} success state {'pr': 'lnbc1......azgfe0', 'routes': [], 'successAction': {'description': 'Thanks love for the lightning!', 'tag': 'url', 'url': 'https:/.......'}} \"\"\" try : purl = self . get_payurl ( email ) res = await get_url ( self . _session , path = purl , headers = self . _invoice_headers ) # res = requests.get(purl) json_content = res . json () lnurlpay = json_content [ \"callback\" ] millisats = amount * 1000 payquery = lnurlpay + \"?amount=\" + str ( millisats ) # get bech32-serialized lightning invoice # ln_res = requests.get(payquery) ln_res = await get_url ( self . _session , path = payquery , headers = self . _invoice_headers ) pr_dict = ln_res . json () # check keys returned for status if \"status\" in pr_dict : reason = pr_dict [ \"reason\" ] return reason elif \"pr\" in pr_dict : bolt11 = pr_dict [ \"pr\" ] return bolt11 except Exception as e : print ( \"Exception as: \" , str ( e )) return e __init__ ( config , session = None ) init Source code in pylnbits/user_wallet.py 35 36 37 38 39 40 41 42 43 44 def __init__ ( self , config , session : ClientSession = None ): \"\"\"__init__ \"\"\" self . _session = session self . _config = config self . _invoice_headers = config . invoice_headers () self . _admin_headers = config . admin_headers () self . _lnbits_url = config . lnbits_url self . paypath = \"/api/v1/payments\" self . walletpath = \"/api/v1/wallet\" check_invoice ( hash ) async Check an invoice (incoming or outgoing) GET /api/v1/payments/ Headers: invoice key Returns 200 OK (application/json) {\"paid\": } Source code in pylnbits/user_wallet.py 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 async def check_invoice ( self , hash : str ): \"\"\" Check an invoice (incoming or outgoing) GET /api/v1/payments/<payment_hash> Headers: invoice key Returns 200 OK (application/json) {\"paid\": <bool>} \"\"\" try : # ppath = \"/api/v1/payments/\" upath = self . paypath + \"/\" + hash path = self . _lnbits_url + upath res = await get_url ( self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e config () property config property Source code in pylnbits/user_wallet.py 46 47 48 49 50 @property def config ( self ): \"\"\"config property \"\"\" return self . _config create_invoice ( direction , amt , memo , webhook ) async Create an invoice(incoming) POST /api/v1/payments Headers {\"X-Api-Key\": \"Invoice Key\"} Body (application/json) {\"out\": false, \"amount\": , \"memo\": } Returns 201 CREATED (application/json) {\"payment_hash\": , \"payment_request\": } curl -X POST https://bits.bitcoin.org.hk/api/v1/payments -d '{\"out\": false, \"amount\": 100, \"memo\": \"poo\", \"webhook\": \"http://google.com\"}' -H \"X-Api-Key: f7f740104bba47e9ac9bb3fa.......\" # only needs Invoice/read key -H \"Content-type: application/json\" Source code in pylnbits/user_wallet.py 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 async def create_invoice ( self , direction : bool , amt : int , memo : str , webhook : str ): \"\"\" Create an invoice(incoming) POST /api/v1/payments Headers {\"X-Api-Key\": \"Invoice Key\"} Body (application/json) {\"out\": false, \"amount\": <int>, \"memo\": <string>} Returns 201 CREATED (application/json) {\"payment_hash\": <string>, \"payment_request\": <string>} curl -X POST https://bits.bitcoin.org.hk/api/v1/payments -d '{\"out\": false, \"amount\": 100, \"memo\": \"poo\", \"webhook\": \"http://google.com\"}' -H \"X-Api-Key: f7f740104bba47e9ac9bb3fa.......\" # only needs Invoice/read key -H \"Content-type: application/json\" \"\"\" try : # upath = \"/api/v1/payments\" path = self . _lnbits_url + self . paypath body = { \"out\" : direction , \"amount\" : amt , \"memo\" : memo , \"webhook\" : webhook } j = json . dumps ( body ) res = await post_url ( self . _session , path = path , headers = self . _invoice_headers , body = j ) return res except Exception as e : logger . info ( e ) return e get_bolt11 ( email , amount ) async fail state {'reason': 'Amount 100 is smaller than minimum 100000.', 'status': 'ERROR'} success state {'pr': 'lnbc1......azgfe0', 'routes': [], 'successAction': {'description': 'Thanks love for the lightning!', 'tag': 'url', 'url': 'https:/.......'}} Source code in pylnbits/user_wallet.py 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 async def get_bolt11 ( self , email : str , amount : int ): \"\"\" fail state {'reason': 'Amount 100 is smaller than minimum 100000.', 'status': 'ERROR'} success state {'pr': 'lnbc1......azgfe0', 'routes': [], 'successAction': {'description': 'Thanks love for the lightning!', 'tag': 'url', 'url': 'https:/.......'}} \"\"\" try : purl = self . get_payurl ( email ) res = await get_url ( self . _session , path = purl , headers = self . _invoice_headers ) # res = requests.get(purl) json_content = res . json () lnurlpay = json_content [ \"callback\" ] millisats = amount * 1000 payquery = lnurlpay + \"?amount=\" + str ( millisats ) # get bech32-serialized lightning invoice # ln_res = requests.get(payquery) ln_res = await get_url ( self . _session , path = payquery , headers = self . _invoice_headers ) pr_dict = ln_res . json () # check keys returned for status if \"status\" in pr_dict : reason = pr_dict [ \"reason\" ] return reason elif \"pr\" in pr_dict : bolt11 = pr_dict [ \"pr\" ] return bolt11 except Exception as e : print ( \"Exception as: \" , str ( e )) return e get_decoded ( bolt11 ) async POST /api/v1/payments/decode Body (application/json) {\"data\": } Returns 200 (application/json) Headers: invoice key Source code in pylnbits/user_wallet.py 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 async def get_decoded ( self , bolt11 : str ): \"\"\" POST /api/v1/payments/decode Body (application/json) {\"data\": <string>} Returns 200 (application/json) Headers: invoice key \"\"\" try : decode_url = self . _lnbits_url + self . paypath + \"/decode\" payload = { \"data\" : bolt11 } # res = requests.post(decode_url, json=payload, headers=self._invoice_headers) res = await post_url ( self . _session , path = decode_url , body = payload , headers = self . _invoice_headers ) return res except Exception as e : print ( \"Exception in get_decoded() \" , e ) return e get_invoices () async Get invoices (incoming or outgoing) GET /api/v1/payments Headers: invoice key Returns 200 OK (application/json) [{ }] Source code in pylnbits/user_wallet.py 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 async def get_invoices ( self ): \"\"\" Get invoices (incoming or outgoing) GET /api/v1/payments Headers: invoice key Returns 200 OK (application/json) [{<invoices>}] \"\"\" try : # ppath = \"/api/v1/payments/\" path = self . _lnbits_url + self . paypath res = await get_url ( self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e get_invoicesbymemo ( memo ) async GET /api/v1/payments?memo= Returns 200 OK (application/json) [{ }] Headers: invoice key Source code in pylnbits/user_wallet.py 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 async def get_invoicesbymemo ( self , memo : str ): \"\"\" GET /api/v1/payments?memo=<memo> Returns 200 OK (application/json) [{<invoices>}] Headers: invoice key \"\"\" try : path = self . _lnbits_url + self . paypath + \"?memo=\" + memo res = await get_url ( self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e get_payhash ( bolt11 ) async Only returns the payment hash not entire decoded invoice Source code in pylnbits/user_wallet.py 180 181 182 183 184 185 186 187 188 189 190 191 async def get_payhash ( self , bolt11 : str ): \"\"\" Only returns the payment hash not entire decoded invoice \"\"\" res = await self . get_decoded ( bolt11 ) decoded = res . json () # print(decoded) if \"payment_hash\" in decoded : payhash = decoded [ \"payment_hash\" ] return payhash else : return None get_payurl ( email ) Construct Lnurlp link from email address provided. Source code in pylnbits/user_wallet.py 231 232 233 234 235 236 237 238 239 240 241 242 243 def get_payurl ( self , email : str ): \"\"\" Construct Lnurlp link from email address provided. \"\"\" try : parts = email . split ( \"@\" ) domain = parts [ 1 ] username = parts [ 0 ] transform_url = \"http://\" + domain + \"/.well-known/lnurlp/\" + username print ( \"Transformed URl: \" + transform_url ) return transform_url except Exception as e : print ( \"Exception, possibly malformed LN Address: \" + str ( e )) get_wallet_details () async GET /api/v1/wallet Headers {\"X-Api-Key\": \"Invoice key\"} Returns 200 OK (application/json) {\"id\": , \"name\": , \"balance\": } Source code in pylnbits/user_wallet.py 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 async def get_wallet_details ( self ): \"\"\" GET /api/v1/wallet Headers {\"X-Api-Key\": \"Invoice key\"} Returns 200 OK (application/json) {\"id\": <string>, \"name\": <string>, \"balance\": <int>} \"\"\" try : # upath = \"/api/v1/wallet\" upath = self . walletpath path = self . _lnbits_url + upath res = await get_url ( self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e pay_invoice ( direction , bolt11 ) async Pay an invoice (outgoing) POST /api/v1/payments Headers {\"X-Api-Key\": \"Admin key\"} Body (application/json) {\"out\": true, \"bolt11\": } Returns 201 CREATED (application/json) {\"payment_hash\": } curl -X POST https://bits.bitcoin.org.hk/api/v1/payments -d '{\"out\": true, \"bolt11\": }' -H \"X-Api-Key: b811bd2580a0431c96d3c4......\" # TODO: needs admin key! -H \"Content-type: application/json\" Source code in pylnbits/user_wallet.py 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 async def pay_invoice ( self , direction : bool , bolt11 : str ): \"\"\" Pay an invoice (outgoing) POST /api/v1/payments Headers {\"X-Api-Key\": \"Admin key\"} Body (application/json) {\"out\": true, \"bolt11\": <string>} Returns 201 CREATED (application/json) {\"payment_hash\": <string>} curl -X POST https://bits.bitcoin.org.hk/api/v1/payments -d '{\"out\": true, \"bolt11\": <string>}' -H \"X-Api-Key: b811bd2580a0431c96d3c4......\" # TODO: needs admin key! -H \"Content-type: application/json\" \"\"\" try : # upath = \"/api/v1/payments\" path = self . _lnbits_url + self . paypath body = { \"out\" : direction , \"bolt11\" : bolt11 } j = json . dumps ( body ) # print(f\"body: {j}\") res = await post_url ( self . _session , path = path , headers = self . _admin_headers , body = j ) return res except Exception as e : logger . info ( e ) return e UserManager Source code in pylnbits/user_manager.pyclass UserManager : def __init__ ( self , config , session : ClientSession = None ): \"\"\"__init__ Initializes a UserManager extension via API \"\"\" self . _config = config self . _lnbits_url = config . lnbits_url self . _invoice_headers = config . invoice_headers () self . _admin_headers = config . admin_headers () self . _session = session # returns JSON list of users async def get_users ( self ): \"\"\" get users managed by the User Manager Extension Returns: JSON list of users \"\"\" try : upath = \"/usermanager/api/v1/users\" path = self . _lnbits_url + upath res = await get_url ( session = self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e # returns single JSON user based on user_id async def get_user ( self , user_id ): \"\"\" gets a user based on user_id Returns a single JSON based on used_id \"\"\" try : upath = \"/usermanager/api/v1/users/\" + user_id path = self . _lnbits_url + upath res = await get_url ( session = self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e # returns JSON wallet data async def get_wallets ( self , user_id ): \"\"\"\" gets wallets based on user_id Returns JSON of wallet data \"\"\" try : wpath = \"/usermanager/api/v1/wallets/\" + user_id path = self . _lnbits_url + wpath res = await get_url ( session = self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e # returns JSON of wallet transactions async def get_tx ( self , wallet_id ): \"\"\" Gets all transactions in a wallet Returns JSON of Wallet Transactions \"\"\" try : tpath = \"/usermanager/api/v1/wallets\" + wallet_id path = self . _lnbits_url + tpath res = await get_url ( session = self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e async def post_user_initial ( self , admin_id , user_name , wallet_name ): \"\"\" creates a user and an initial wallet \"\"\" try : tpath = \"/usermanager/api/v1/users\" path = self . _lnbits_url + tpath body = { \"admin_id\" : admin_id , \"user_name\" : user_name , \"wallet_name\" : wallet_name } jbody = json . dumps ( body ) res = await post_url ( session = self . _session , path = path , headers = self . _invoice_headers , body = jbody ) return res except Exception as e : logger . info ( e ) return e # body = {\"user_id\": <string>, \"wallet_name\": <string>, \"admin_id\": <string>} # returns 201 CREATED # {\"id\": <string>, \"admin\": <string>, \"name\": <string>, # \"user\": <string>, \"adminkey\": <string>, \"inkey\": <string>} async def post_wallet ( self , user_id , wallet_name , admin_id ): \"\"\" Post_wallet returns api keys related to wallet Returns {\"id\": <string>, \"admin\": <string>, \"name\": <string>, \"user\": <string>, \"adminkey\": <string>, \"inkey\": <string>} \"\"\" try : tpath = \"/usermanager/api/v1/wallets\" path = self . _lnbits_url + tpath body = { \"user_id\" : user_id , \"wallet_name\" : wallet_name , \"admin_id\" : admin_id } jbody = json . dumps ( body ) res = await post_url ( session = self . _session , path = path , headers = self . _invoice_headers , body = jbody ) return res except Exception as e : logger . info ( e ) return e async def delete_user ( self , user_id ): \"\"\" Deletes a user based on user_id \"\"\" try : tpath = \"/usermanager/api/v1/users/\" + user_id path = self . _lnbits_url + tpath res = await delete_url ( session = self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e async def delete_wallet ( self , wallet_id ): \"\"\" Delete a wallet based on wallet_id \"\"\" try : tpath = \"/usermanager/api/v1/wallets/\" + wallet_id path = self . _lnbits_url + tpath res = await delete_url ( session = self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e # temporarily use this to activate extensions: # https://yourdomain.com/extensions?usr=89.....&enable=lnurlp # unclear why curl doesn't work ? async def post_activate_ext ( self , user_id : str , extension : str , active : int ): \"\"\" activates an extension for a user created by User Manager Extension \"\"\" try : tpath = \"/usermanager/api/v1/extensions\" path = self . _lnbits_url + tpath body = { \"userid\" : user_id , \"extension\" : extension , \"active\" : active } jbody = json . dumps ( body ) res = await post_url ( session = self . _session , path = path , headers = self . _invoice_headers , body = jbody ) return res except Exception as e : logger . info ( e ) return e __init__ ( config , session = None ) init Initializes a UserManager extension via API Source code in pylnbits/user_manager.py 31 32 33 34 35 36 37 38 39 40 41 def __init__ ( self , config , session : ClientSession = None ): \"\"\"__init__ Initializes a UserManager extension via API \"\"\" self . _config = config self . _lnbits_url = config . lnbits_url self . _invoice_headers = config . invoice_headers () self . _admin_headers = config . admin_headers () self . _session = session delete_user ( user_id ) async Deletes a user based on user_id Source code in pylnbits/user_manager.py 144 145 146 147 148 149 150 151 152 153 154 155 async def delete_user ( self , user_id ): \"\"\" Deletes a user based on user_id \"\"\" try : tpath = \"/usermanager/api/v1/users/\" + user_id path = self . _lnbits_url + tpath res = await delete_url ( session = self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e delete_wallet ( wallet_id ) async Delete a wallet based on wallet_id Source code in pylnbits/user_manager.py 157 158 159 160 161 162 163 164 165 166 167 168 async def delete_wallet ( self , wallet_id ): \"\"\" Delete a wallet based on wallet_id \"\"\" try : tpath = \"/usermanager/api/v1/wallets/\" + wallet_id path = self . _lnbits_url + tpath res = await delete_url ( session = self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e get_tx ( wallet_id ) async Gets all transactions in a wallet Returns JSON of Wallet Transactions Source code in pylnbits/user_manager.py 93 94 95 96 97 98 99 100 101 102 103 104 105 106 async def get_tx ( self , wallet_id ): \"\"\" Gets all transactions in a wallet Returns JSON of Wallet Transactions \"\"\" try : tpath = \"/usermanager/api/v1/wallets\" + wallet_id path = self . _lnbits_url + tpath res = await get_url ( session = self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e get_user ( user_id ) async gets a user based on user_id Returns a single JSON based on used_id Source code in pylnbits/user_manager.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 async def get_user ( self , user_id ): \"\"\" gets a user based on user_id Returns a single JSON based on used_id \"\"\" try : upath = \"/usermanager/api/v1/users/\" + user_id path = self . _lnbits_url + upath res = await get_url ( session = self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e get_users () async get users managed by the User Manager Extension Returns: JSON list of users Source code in pylnbits/user_manager.py 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 async def get_users ( self ): \"\"\" get users managed by the User Manager Extension Returns: JSON list of users \"\"\" try : upath = \"/usermanager/api/v1/users\" path = self . _lnbits_url + upath res = await get_url ( session = self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e get_wallets ( user_id ) async \" gets wallets based on user_id Returns JSON of wallet data Source code in pylnbits/user_manager.py 77 78 79 80 81 82 83 84 85 86 87 88 89 90 async def get_wallets ( self , user_id ): \"\"\"\" gets wallets based on user_id Returns JSON of wallet data \"\"\" try : wpath = \"/usermanager/api/v1/wallets/\" + user_id path = self . _lnbits_url + wpath res = await get_url ( session = self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e post_activate_ext ( user_id , extension , active ) async activates an extension for a user created by User Manager Extension Source code in pylnbits/user_manager.py 173 174 175 176 177 178 179 180 181 182 183 184 185 186 async def post_activate_ext ( self , user_id : str , extension : str , active : int ): \"\"\" activates an extension for a user created by User Manager Extension \"\"\" try : tpath = \"/usermanager/api/v1/extensions\" path = self . _lnbits_url + tpath body = { \"userid\" : user_id , \"extension\" : extension , \"active\" : active } jbody = json . dumps ( body ) res = await post_url ( session = self . _session , path = path , headers = self . _invoice_headers , body = jbody ) return res except Exception as e : logger . info ( e ) return e post_user_initial ( admin_id , user_name , wallet_name ) async creates a user and an initial wallet Source code in pylnbits/user_manager.py 108 109 110 111 112 113 114 115 116 117 118 119 120 121 async def post_user_initial ( self , admin_id , user_name , wallet_name ): \"\"\" creates a user and an initial wallet \"\"\" try : tpath = \"/usermanager/api/v1/users\" path = self . _lnbits_url + tpath body = { \"admin_id\" : admin_id , \"user_name\" : user_name , \"wallet_name\" : wallet_name } jbody = json . dumps ( body ) res = await post_url ( session = self . _session , path = path , headers = self . _invoice_headers , body = jbody ) return res except Exception as e : logger . info ( e ) return e post_wallet ( user_id , wallet_name , admin_id ) async Post_wallet returns api keys related to wallet Returns {\"id\": , \"admin\": , \"name\": , \"user\": , \"adminkey\": , \"inkey\": } Source code in pylnbits/user_manager.py 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 async def post_wallet ( self , user_id , wallet_name , admin_id ): \"\"\" Post_wallet returns api keys related to wallet Returns {\"id\": <string>, \"admin\": <string>, \"name\": <string>, \"user\": <string>, \"adminkey\": <string>, \"inkey\": <string>} \"\"\" try : tpath = \"/usermanager/api/v1/wallets\" path = self . _lnbits_url + tpath body = { \"user_id\" : user_id , \"wallet_name\" : wallet_name , \"admin_id\" : admin_id } jbody = json . dumps ( body ) res = await post_url ( session = self . _session , path = path , headers = self . _invoice_headers , body = jbody ) return res except Exception as e : logger . info ( e ) return e LnurlPay Source code in pylnbits/lnurl_p.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 class LnurlPay : def __init__ ( self , config , session : ClientSession = None ): self . _config = config self . _lnbits_url = config . lnbits_url self . _invoice_headers = config . invoice_headers () self . _admin_headers = config . admin_headers () self . _session = session self . _upath = \"/lnurlp/api/v1/links\" async def list_paylinks ( self ): \"\"\" GET /lnurlp/api/v1/links Returns list pay links. Returns 200 OK app/json [<pay_link_object>, ...] \"\"\" try : path = self . _lnbits_url + self . _upath res = await get_url ( self . _session , path , self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e async def get_paylink ( self , pay_id : str ): \"\"\" GET /lnurlp/api/v1/links/<pay_id> Returns list pay links. Returns 200 OK app/json {\"lnurl\": <string>} \"\"\" try : path = self . _lnbits_url + self . _upath + \"/\" + pay_id res = await get_url ( self . _session , path , self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e async def create_paylink ( self , body : str ): \"\"\" POST /lnurlp/api/v1/links Body (application/json) {\"description\": <string> \"amount\": <integer> \"max\": <integer> \"min\": <integer> \"comment_chars\": <integer>} Returns Returns 201 CREATED app/json {\"lnurl\": <string>} \"\"\" try : path = self . _lnbits_url + self . _upath res = await post_url ( self . _session , path = path , headers = self . _admin_headers , body = json . dumps ( body )) return res except Exception as e : logger . info ( e ) return e async def update_paylink ( self , pay_id : str , body : str ): \"\"\" PUT /lnurlp/api/v1/links/<pay_id> Body (application/json) {\"description\": <string> \"amount\": <integer>} Returns Returns 200 OK app/json {\"lnurl\": <string>} \"\"\" try : path = self . _lnbits_url + self . _upath + \"/\" + pay_id res = await put_url ( self . _session , path = path , headers = self . _admin_headers , body = json . dumps ( body )) return res except Exception as e : logger . info ( e ) return e async def delete_paylink ( self , pay_id : str ): \"\"\" DELETE /lnurlp/api/v1/links/<pay_id> Returns Returns 204 NO CONTENT \"\"\" try : path = self . _lnbits_url + self . _upath + \"/\" + pay_id res = await delete_url ( self . _session , path = path , headers = self . _admin_headers ) return res except Exception as e : logger . info ( e ) return e create_paylink ( body ) async POST /lnurlp/api/v1/links Body (application/json) {\"description\": \"amount\": \"max\": \"min\": \"comment_chars\": } Returns Returns 201 CREATED app/json {\"lnurl\": } Source code in pylnbits/lnurl_p.py 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 async def create_paylink ( self , body : str ): \"\"\" POST /lnurlp/api/v1/links Body (application/json) {\"description\": <string> \"amount\": <integer> \"max\": <integer> \"min\": <integer> \"comment_chars\": <integer>} Returns Returns 201 CREATED app/json {\"lnurl\": <string>} \"\"\" try : path = self . _lnbits_url + self . _upath res = await post_url ( self . _session , path = path , headers = self . _admin_headers , body = json . dumps ( body )) return res except Exception as e : logger . info ( e ) return e delete_paylink ( pay_id ) async DELETE /lnurlp/api/v1/links/ Returns Returns 204 NO CONTENT Source code in pylnbits/lnurl_p.py 99 100 101 102 103 104 105 106 107 108 109 110 111 async def delete_paylink ( self , pay_id : str ): \"\"\" DELETE /lnurlp/api/v1/links/<pay_id> Returns Returns 204 NO CONTENT \"\"\" try : path = self . _lnbits_url + self . _upath + \"/\" + pay_id res = await delete_url ( self . _session , path = path , headers = self . _admin_headers ) return res except Exception as e : logger . info ( e ) return e get_paylink ( pay_id ) async GET /lnurlp/api/v1/links/ Returns list pay links. Returns 200 OK app/json {\"lnurl\": } Source code in pylnbits/lnurl_p.py 48 49 50 51 52 53 54 55 56 57 58 59 60 async def get_paylink ( self , pay_id : str ): \"\"\" GET /lnurlp/api/v1/links/<pay_id> Returns list pay links. Returns 200 OK app/json {\"lnurl\": <string>} \"\"\" try : path = self . _lnbits_url + self . _upath + \"/\" + pay_id res = await get_url ( self . _session , path , self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e list_paylinks () async GET /lnurlp/api/v1/links Returns list pay links. Returns 200 OK app/json [ , ...] Source code in pylnbits/lnurl_p.py 35 36 37 38 39 40 41 42 43 44 45 46 async def list_paylinks ( self ): \"\"\" GET /lnurlp/api/v1/links Returns list pay links. Returns 200 OK app/json [<pay_link_object>, ...] \"\"\" try : path = self . _lnbits_url + self . _upath res = await get_url ( self . _session , path , self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e update_paylink ( pay_id , body ) async PUT /lnurlp/api/v1/links/ Body (application/json) {\"description\": \"amount\": } Returns Returns 200 OK app/json {\"lnurl\": } Source code in pylnbits/lnurl_p.py 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 async def update_paylink ( self , pay_id : str , body : str ): \"\"\" PUT /lnurlp/api/v1/links/<pay_id> Body (application/json) {\"description\": <string> \"amount\": <integer>} Returns Returns 200 OK app/json {\"lnurl\": <string>} \"\"\" try : path = self . _lnbits_url + self . _upath + \"/\" + pay_id res = await put_url ( self . _session , path = path , headers = self . _admin_headers , body = json . dumps ( body )) return res except Exception as e : logger . info ( e ) return e LnurlWithdraw Source code in pylnbits/lnurl_w.pyclass LnurlWithdraw : def __init__ ( self , config , session : ClientSession = None ): self . _config = config self . _lnbits_url = config . lnbits_url self . _invoice_headers = config . invoice_headers () self . _admin_headers = config . admin_headers () self . _session = session self . _upath = \"/withdraw/api/v1/links\" # List withdraw links async def list_withdrawlinks ( self ): \"\"\" GET /withdraw/api/v1/links Returns list withdraw links. Returns 200 OK app/json [<withdraw_link_object>, ...] \"\"\" try : path = self . _lnbits_url + self . _upath res = await get_url ( self . _session , path , self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e # Get a withdraw link async def get_withdrawlink ( self , withdraw_id : str ): \"\"\" GET /withdraw/api/v1/links/<pay_id> Returns list pay links. Returns 200 OK app/json {\"lnurl\": <string>} \"\"\" try : path = self . _lnbits_url + self . _upath + \"/\" + withdraw_id # print(f\"GET WITHDRAWL LINK PATH: {path}\") res = await get_url_resp ( self . _session , path , self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e # Create a withdraw link async def create_withdrawlink ( self , body : str ): \"\"\" POST /withdraw/api/v1/links Body (application/json) {\"title\": <string>, \"min_withdrawable\": <integer>, \"max_withdrawable\": <integer>, \"uses\": <integer>, \"wait_time\": <integer>, \"is_unique\": <boolean>} Returns Returns 201 CREATED app/json {\"id\": < string> , \"is_unique\": <boolean>, \"k1\": <str>, \"lnurl\": <string>, \"max_withdrawable\": <int>, \"min_withdrawable\": <int>, \"number\": <int>, \"open_time\": <int>, \"title\": <str>, \"unique_hash\": <str>, \"used\": <int>, \"uses\": <int>, \"usescsv\": <str>, \"wait_time\": <int>, \"wallet\": <str> \"} Batch Print Page link: https://<lnbits-url>/withdraw/print/<id> Shareable link for single QR: https://<lnbits-url>/withdraw/<id> \"\"\" try : path = self . _lnbits_url + self . _upath res = await post_url ( self . _session , path = path , headers = self . _admin_headers , body = json . dumps ( body )) return res except Exception as e : logger . info ( e ) return str ( e ) # Update a withdraw link async def update_withdrawlink ( self , withdraw_id : str , body : str ): \"\"\" PUT /withdraw/api/v1/links/<pay_id> Body (application/json) {\"title\": <string>, \"min_withdrawable\": <integer>, \"max_withdrawable\": <integer>, \"uses\": <integer>, \"wait_time\": <integer>, \"is_unique\": <boolean>} Returns Returns 200 OK app/json {\"lnurl\": <string>} \"\"\" try : path = self . _lnbits_url + self . _upath + \"/\" + withdraw_id res = await put_url ( self . _session , path = path , headers = self . _admin_headers , body = json . dumps ( body )) return res except Exception as e : logger . info ( e ) return e # Delete a withdraw link async def delete_withdrawlink ( self , withdraw_id : str ): \"\"\" DELETE /withdraw/api/v1/links/<withdraw_id> Returns Returns 204 NO CONTENT \"\"\" try : path = self . _lnbits_url + self . _upath + \"/\" + withdraw_id print ( path ) res = await delete_url ( self . _session , path = path , headers = self . _admin_headers ) return res except Exception as e : logger . info ( e ) return e async def get_hash_check ( self , hash : str , lnurl_id : str ): \"\"\" GET /withdraw/api/v1/links/<the_hash>/<lnurl_id> Headers {\"X-Api-Key\": <invoice_key>} Returns 201 CREATED (application/json) {\"status\": <bool>} \"\"\" try : upath = \"/withdraw/api/v1/links/\" path = self . _lnbits_url + upath + hash + \"/\" + lnurl_id res = await get_url ( self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e async def get_image_embed ( self , lnurl_id : str ): \"\"\" GET /withdraw/img/<lnurl_id> \"\"\" try : upath = \"/withdraw/img/\" path = self . _lnbits_url + upath + lnurl_id res = await get_url_resp ( self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e create_withdrawlink ( body ) async POST /withdraw/api/v1/links Body (application/json) {\"title\": , \"min_withdrawable\": , \"max_withdrawable\": , \"uses\": , \"wait_time\": , \"is_unique\": } Returns Returns 201 CREATED app/json {\"id\": < string> , \"is_unique\": , \"k1\": , \"lnurl\": , \"max_withdrawable\": , \"min_withdrawable\": , \"number\": , \"open_time\": , \"title\": , \"unique_hash\": , \"used\": , \"uses\": , \"usescsv\": , \"wait_time\": , \"wallet\": \"} Batch Print Page link: https:// /withdraw/print/ Shareable link for single QR: https:// /withdraw/ Source code in pylnbits/lnurl_w.py 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 async def create_withdrawlink ( self , body : str ): \"\"\" POST /withdraw/api/v1/links Body (application/json) {\"title\": <string>, \"min_withdrawable\": <integer>, \"max_withdrawable\": <integer>, \"uses\": <integer>, \"wait_time\": <integer>, \"is_unique\": <boolean>} Returns Returns 201 CREATED app/json {\"id\": < string> , \"is_unique\": <boolean>, \"k1\": <str>, \"lnurl\": <string>, \"max_withdrawable\": <int>, \"min_withdrawable\": <int>, \"number\": <int>, \"open_time\": <int>, \"title\": <str>, \"unique_hash\": <str>, \"used\": <int>, \"uses\": <int>, \"usescsv\": <str>, \"wait_time\": <int>, \"wallet\": <str> \"} Batch Print Page link: https://<lnbits-url>/withdraw/print/<id> Shareable link for single QR: https://<lnbits-url>/withdraw/<id> \"\"\" try : path = self . _lnbits_url + self . _upath res = await post_url ( self . _session , path = path , headers = self . _admin_headers , body = json . dumps ( body )) return res except Exception as e : logger . info ( e ) return str ( e ) delete_withdrawlink ( withdraw_id ) async DELETE /withdraw/api/v1/links/ Returns Returns 204 NO CONTENT Source code in pylnbits/lnurl_w.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 async def delete_withdrawlink ( self , withdraw_id : str ): \"\"\" DELETE /withdraw/api/v1/links/<withdraw_id> Returns Returns 204 NO CONTENT \"\"\" try : path = self . _lnbits_url + self . _upath + \"/\" + withdraw_id print ( path ) res = await delete_url ( self . _session , path = path , headers = self . _admin_headers ) return res except Exception as e : logger . info ( e ) return e get_hash_check ( hash , lnurl_id ) async GET /withdraw/api/v1/links/ / Headers {\"X-Api-Key\": } Returns 201 CREATED (application/json) {\"status\": } Source code in pylnbits/lnurl_w.py 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 async def get_hash_check ( self , hash : str , lnurl_id : str ): \"\"\" GET /withdraw/api/v1/links/<the_hash>/<lnurl_id> Headers {\"X-Api-Key\": <invoice_key>} Returns 201 CREATED (application/json) {\"status\": <bool>} \"\"\" try : upath = \"/withdraw/api/v1/links/\" path = self . _lnbits_url + upath + hash + \"/\" + lnurl_id res = await get_url ( self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e get_image_embed ( lnurl_id ) async GET /withdraw/img/ Source code in pylnbits/lnurl_w.py 160 161 162 163 164 165 166 167 168 169 170 171 async def get_image_embed ( self , lnurl_id : str ): \"\"\" GET /withdraw/img/<lnurl_id> \"\"\" try : upath = \"/withdraw/img/\" path = self . _lnbits_url + upath + lnurl_id res = await get_url_resp ( self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e get_withdrawlink ( withdraw_id ) async GET /withdraw/api/v1/links/ Returns list pay links. Returns 200 OK app/json {\"lnurl\": } Source code in pylnbits/lnurl_w.py 55 56 57 58 59 60 61 62 63 64 65 66 67 68 async def get_withdrawlink ( self , withdraw_id : str ): \"\"\" GET /withdraw/api/v1/links/<pay_id> Returns list pay links. Returns 200 OK app/json {\"lnurl\": <string>} \"\"\" try : path = self . _lnbits_url + self . _upath + \"/\" + withdraw_id # print(f\"GET WITHDRAWL LINK PATH: {path}\") res = await get_url_resp ( self . _session , path , self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e list_withdrawlinks () async GET /withdraw/api/v1/links Returns list withdraw links. Returns 200 OK app/json [ , ...] Source code in pylnbits/lnurl_w.py 40 41 42 43 44 45 46 47 48 49 50 51 async def list_withdrawlinks ( self ): \"\"\" GET /withdraw/api/v1/links Returns list withdraw links. Returns 200 OK app/json [<withdraw_link_object>, ...] \"\"\" try : path = self . _lnbits_url + self . _upath res = await get_url ( self . _session , path , self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e update_withdrawlink ( withdraw_id , body ) async PUT /withdraw/api/v1/links/ Body (application/json) {\"title\": , \"min_withdrawable\": , \"max_withdrawable\": , \"uses\": , \"wait_time\": , \"is_unique\": } Returns Returns 200 OK app/json {\"lnurl\": } Source code in pylnbits/lnurl_w.py 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 async def update_withdrawlink ( self , withdraw_id : str , body : str ): \"\"\" PUT /withdraw/api/v1/links/<pay_id> Body (application/json) {\"title\": <string>, \"min_withdrawable\": <integer>, \"max_withdrawable\": <integer>, \"uses\": <integer>, \"wait_time\": <integer>, \"is_unique\": <boolean>} Returns Returns 200 OK app/json {\"lnurl\": <string>} \"\"\" try : path = self . _lnbits_url + self . _upath + \"/\" + withdraw_id res = await put_url ( self . _session , path = path , headers = self . _admin_headers , body = json . dumps ( body )) return res except Exception as e : logger . info ( e ) return e Rest API methods for LNbits LndHub Extension Integrates with Blue Wallet, Zeus LndHub Source code in pylnbits/lndhub.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class LndHub : def __init__ ( self , config ): \"\"\"__init__ \"\"\" self . _invoice_key = config . in_key self . _admin_key = config . admin_key self . _lnbits_url = config . lnbits_url def admin ( self ): \"\"\" create admin url for LNDHub Returns lndhub url \"\"\" url = \"lndhub://admin:\" + self . _admin_key + \"@\" + self . _lnbits_url + \"/lndhub/ext/\" return url def invoice ( self ): \"\"\" create invoice url for LNDHub Returns lndhub url \"\"\" url = \"lndhub://invoice:\" + self . _invoice_key + \"@\" + self . _lnbits_url + \"/lndhub/ext/\" return url __init__ ( config ) init Source code in pylnbits/lndhub.py 10 11 12 13 14 15 def __init__ ( self , config ): \"\"\"__init__ \"\"\" self . _invoice_key = config . in_key self . _admin_key = config . admin_key self . _lnbits_url = config . lnbits_url admin () create admin url for LNDHub Returns lndhub url Source code in pylnbits/lndhub.py 17 18 19 20 21 22 23 24 def admin ( self ): \"\"\" create admin url for LNDHub Returns lndhub url \"\"\" url = \"lndhub://admin:\" + self . _admin_key + \"@\" + self . _lnbits_url + \"/lndhub/ext/\" return url invoice () create invoice url for LNDHub Returns lndhub url Source code in pylnbits/lndhub.py 26 27 28 29 30 31 32 33 def invoice ( self ): \"\"\" create invoice url for LNDHub Returns lndhub url \"\"\" url = \"lndhub://invoice:\" + self . _invoice_key + \"@\" + self . _lnbits_url + \"/lndhub/ext/\" return url Project layout Source: https://github.com/lightningames/pylnbits mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. config_sample.yml pylnbits/ __init__.py config.py lndhub.py lnurl_p.py lnurl_w.py user_manager.py user_wallet.py utils.py tests/ __init__.py test_lndhub.py test_lnurlp.py test_lnurlw.py test_usermanager.py test_userwallet.py","title":"Reference"},{"location":"reference/#reference","text":"This part of the project documentation focuses on an information-oriented approach. Use it as a reference for the technical implementation of the pylnbits project code. Modules exported by this package: config.py : where you set the LNBits user API keys for your instance of the pylnbits library user_wallet.py : handles Rest API methods for LNbits User Wallet (lnbits page where users can enable extensions) Get wallet details Create an invoice (incoming) Pay an invoice (outgoing) Check an invoice (incoming or outgoing) Decode an invoice (new) Get invoices (incoming or outgoing) (new) Get invoice(s) by memo (incoming or outgoing (new) user_manager.py : For managing multiple users on LNBits, calls Rest API methods from LNbits User Manager Extension GET users GET user (single user) GET wallets GET transactions POST wallet POST user + initial wallet DELETE user and their wallets DELETE wallet POST activate extension lnurl_p.py : For creating and managing LNURLp links, calls Rest API methods for LNbits LNURLp Pay Extension List pay links Get a pay link Create a pay link Update a pay link Delete a pay link lnurl_w.py : For creating and managing LNURLw links, handles Rest API methods for LNbits LNURLw Withdraw Extension: List withdraw links Get a withdraw link Create a withdraw link Update a withdraw link Delete a withdraw link Get hash check Get image to embed lndhub.py : for fetching admin and invoice lndhub urls","title":"Reference"},{"location":"reference/#pylnbits.user_wallet.UserWallet","text":"Source code in pylnbits/user_wallet.pyclass UserWallet : def __init__ ( self , config , session : ClientSession = None ): \"\"\"__init__ \"\"\" self . _session = session self . _config = config self . _invoice_headers = config . invoice_headers () self . _admin_headers = config . admin_headers () self . _lnbits_url = config . lnbits_url self . paypath = \"/api/v1/payments\" self . walletpath = \"/api/v1/wallet\" @property def config ( self ): \"\"\"config property \"\"\" return self . _config async def get_wallet_details ( self ): \"\"\" GET /api/v1/wallet Headers {\"X-Api-Key\": \"Invoice key\"} Returns 200 OK (application/json) {\"id\": <string>, \"name\": <string>, \"balance\": <int>} \"\"\" try : # upath = \"/api/v1/wallet\" upath = self . walletpath path = self . _lnbits_url + upath res = await get_url ( self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e async def check_invoice ( self , hash : str ): \"\"\" Check an invoice (incoming or outgoing) GET /api/v1/payments/<payment_hash> Headers: invoice key Returns 200 OK (application/json) {\"paid\": <bool>} \"\"\" try : # ppath = \"/api/v1/payments/\" upath = self . paypath + \"/\" + hash path = self . _lnbits_url + upath res = await get_url ( self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e async def create_invoice ( self , direction : bool , amt : int , memo : str , webhook : str ): \"\"\" Create an invoice(incoming) POST /api/v1/payments Headers {\"X-Api-Key\": \"Invoice Key\"} Body (application/json) {\"out\": false, \"amount\": <int>, \"memo\": <string>} Returns 201 CREATED (application/json) {\"payment_hash\": <string>, \"payment_request\": <string>} curl -X POST https://bits.bitcoin.org.hk/api/v1/payments -d '{\"out\": false, \"amount\": 100, \"memo\": \"poo\", \"webhook\": \"http://google.com\"}' -H \"X-Api-Key: f7f740104bba47e9ac9bb3fa.......\" # only needs Invoice/read key -H \"Content-type: application/json\" \"\"\" try : # upath = \"/api/v1/payments\" path = self . _lnbits_url + self . paypath body = { \"out\" : direction , \"amount\" : amt , \"memo\" : memo , \"webhook\" : webhook } j = json . dumps ( body ) res = await post_url ( self . _session , path = path , headers = self . _invoice_headers , body = j ) return res except Exception as e : logger . info ( e ) return e async def pay_invoice ( self , direction : bool , bolt11 : str ): \"\"\" Pay an invoice (outgoing) POST /api/v1/payments Headers {\"X-Api-Key\": \"Admin key\"} Body (application/json) {\"out\": true, \"bolt11\": <string>} Returns 201 CREATED (application/json) {\"payment_hash\": <string>} curl -X POST https://bits.bitcoin.org.hk/api/v1/payments -d '{\"out\": true, \"bolt11\": <string>}' -H \"X-Api-Key: b811bd2580a0431c96d3c4......\" # TODO: needs admin key! -H \"Content-type: application/json\" \"\"\" try : # upath = \"/api/v1/payments\" path = self . _lnbits_url + self . paypath body = { \"out\" : direction , \"bolt11\" : bolt11 } j = json . dumps ( body ) # print(f\"body: {j}\") res = await post_url ( self . _session , path = path , headers = self . _admin_headers , body = j ) return res except Exception as e : logger . info ( e ) return e async def get_decoded ( self , bolt11 : str ): \"\"\" POST /api/v1/payments/decode Body (application/json) {\"data\": <string>} Returns 200 (application/json) Headers: invoice key \"\"\" try : decode_url = self . _lnbits_url + self . paypath + \"/decode\" payload = { \"data\" : bolt11 } # res = requests.post(decode_url, json=payload, headers=self._invoice_headers) res = await post_url ( self . _session , path = decode_url , body = payload , headers = self . _invoice_headers ) return res except Exception as e : print ( \"Exception in get_decoded() \" , e ) return e # get payment hash from bolt11 async def get_payhash ( self , bolt11 : str ): \"\"\" Only returns the payment hash not entire decoded invoice \"\"\" res = await self . get_decoded ( bolt11 ) decoded = res . json () # print(decoded) if \"payment_hash\" in decoded : payhash = decoded [ \"payment_hash\" ] return payhash else : return None async def get_invoices ( self ): \"\"\" Get invoices (incoming or outgoing) GET /api/v1/payments Headers: invoice key Returns 200 OK (application/json) [{<invoices>}] \"\"\" try : # ppath = \"/api/v1/payments/\" path = self . _lnbits_url + self . paypath res = await get_url ( self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e async def get_invoicesbymemo ( self , memo : str ): \"\"\" GET /api/v1/payments?memo=<memo> Returns 200 OK (application/json) [{<invoices>}] Headers: invoice key \"\"\" try : path = self . _lnbits_url + self . paypath + \"?memo=\" + memo res = await get_url ( self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e # from lnaddress def get_payurl ( self , email : str ): \"\"\" Construct Lnurlp link from email address provided. \"\"\" try : parts = email . split ( \"@\" ) domain = parts [ 1 ] username = parts [ 0 ] transform_url = \"http://\" + domain + \"/.well-known/lnurlp/\" + username print ( \"Transformed URl: \" + transform_url ) return transform_url except Exception as e : print ( \"Exception, possibly malformed LN Address: \" + str ( e )) # from lnaddress async def get_bolt11 ( self , email : str , amount : int ): \"\"\" fail state {'reason': 'Amount 100 is smaller than minimum 100000.', 'status': 'ERROR'} success state {'pr': 'lnbc1......azgfe0', 'routes': [], 'successAction': {'description': 'Thanks love for the lightning!', 'tag': 'url', 'url': 'https:/.......'}} \"\"\" try : purl = self . get_payurl ( email ) res = await get_url ( self . _session , path = purl , headers = self . _invoice_headers ) # res = requests.get(purl) json_content = res . json () lnurlpay = json_content [ \"callback\" ] millisats = amount * 1000 payquery = lnurlpay + \"?amount=\" + str ( millisats ) # get bech32-serialized lightning invoice # ln_res = requests.get(payquery) ln_res = await get_url ( self . _session , path = payquery , headers = self . _invoice_headers ) pr_dict = ln_res . json () # check keys returned for status if \"status\" in pr_dict : reason = pr_dict [ \"reason\" ] return reason elif \"pr\" in pr_dict : bolt11 = pr_dict [ \"pr\" ] return bolt11 except Exception as e : print ( \"Exception as: \" , str ( e )) return e","title":"UserWallet"},{"location":"reference/#pylnbits.user_wallet.UserWallet.__init__","text":"init Source code in pylnbits/user_wallet.py 35 36 37 38 39 40 41 42 43 44 def __init__ ( self , config , session : ClientSession = None ): \"\"\"__init__ \"\"\" self . _session = session self . _config = config self . _invoice_headers = config . invoice_headers () self . _admin_headers = config . admin_headers () self . _lnbits_url = config . lnbits_url self . paypath = \"/api/v1/payments\" self . walletpath = \"/api/v1/wallet\"","title":"__init__()"},{"location":"reference/#pylnbits.user_wallet.UserWallet.check_invoice","text":"Check an invoice (incoming or outgoing) GET /api/v1/payments/ Headers: invoice key Returns 200 OK (application/json) {\"paid\": } Source code in pylnbits/user_wallet.py 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 async def check_invoice ( self , hash : str ): \"\"\" Check an invoice (incoming or outgoing) GET /api/v1/payments/<payment_hash> Headers: invoice key Returns 200 OK (application/json) {\"paid\": <bool>} \"\"\" try : # ppath = \"/api/v1/payments/\" upath = self . paypath + \"/\" + hash path = self . _lnbits_url + upath res = await get_url ( self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e","title":"check_invoice()"},{"location":"reference/#pylnbits.user_wallet.UserWallet.config","text":"config property Source code in pylnbits/user_wallet.py 46 47 48 49 50 @property def config ( self ): \"\"\"config property \"\"\" return self . _config","title":"config()"},{"location":"reference/#pylnbits.user_wallet.UserWallet.create_invoice","text":"Create an invoice(incoming) POST /api/v1/payments Headers {\"X-Api-Key\": \"Invoice Key\"} Body (application/json) {\"out\": false, \"amount\": , \"memo\": } Returns 201 CREATED (application/json) {\"payment_hash\": , \"payment_request\": } curl -X POST https://bits.bitcoin.org.hk/api/v1/payments -d '{\"out\": false, \"amount\": 100, \"memo\": \"poo\", \"webhook\": \"http://google.com\"}' -H \"X-Api-Key: f7f740104bba47e9ac9bb3fa.......\" # only needs Invoice/read key -H \"Content-type: application/json\" Source code in pylnbits/user_wallet.py 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 async def create_invoice ( self , direction : bool , amt : int , memo : str , webhook : str ): \"\"\" Create an invoice(incoming) POST /api/v1/payments Headers {\"X-Api-Key\": \"Invoice Key\"} Body (application/json) {\"out\": false, \"amount\": <int>, \"memo\": <string>} Returns 201 CREATED (application/json) {\"payment_hash\": <string>, \"payment_request\": <string>} curl -X POST https://bits.bitcoin.org.hk/api/v1/payments -d '{\"out\": false, \"amount\": 100, \"memo\": \"poo\", \"webhook\": \"http://google.com\"}' -H \"X-Api-Key: f7f740104bba47e9ac9bb3fa.......\" # only needs Invoice/read key -H \"Content-type: application/json\" \"\"\" try : # upath = \"/api/v1/payments\" path = self . _lnbits_url + self . paypath body = { \"out\" : direction , \"amount\" : amt , \"memo\" : memo , \"webhook\" : webhook } j = json . dumps ( body ) res = await post_url ( self . _session , path = path , headers = self . _invoice_headers , body = j ) return res except Exception as e : logger . info ( e ) return e","title":"create_invoice()"},{"location":"reference/#pylnbits.user_wallet.UserWallet.get_bolt11","text":"fail state {'reason': 'Amount 100 is smaller than minimum 100000.', 'status': 'ERROR'} success state {'pr': 'lnbc1......azgfe0', 'routes': [], 'successAction': {'description': 'Thanks love for the lightning!', 'tag': 'url', 'url': 'https:/.......'}} Source code in pylnbits/user_wallet.py 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 async def get_bolt11 ( self , email : str , amount : int ): \"\"\" fail state {'reason': 'Amount 100 is smaller than minimum 100000.', 'status': 'ERROR'} success state {'pr': 'lnbc1......azgfe0', 'routes': [], 'successAction': {'description': 'Thanks love for the lightning!', 'tag': 'url', 'url': 'https:/.......'}} \"\"\" try : purl = self . get_payurl ( email ) res = await get_url ( self . _session , path = purl , headers = self . _invoice_headers ) # res = requests.get(purl) json_content = res . json () lnurlpay = json_content [ \"callback\" ] millisats = amount * 1000 payquery = lnurlpay + \"?amount=\" + str ( millisats ) # get bech32-serialized lightning invoice # ln_res = requests.get(payquery) ln_res = await get_url ( self . _session , path = payquery , headers = self . _invoice_headers ) pr_dict = ln_res . json () # check keys returned for status if \"status\" in pr_dict : reason = pr_dict [ \"reason\" ] return reason elif \"pr\" in pr_dict : bolt11 = pr_dict [ \"pr\" ] return bolt11 except Exception as e : print ( \"Exception as: \" , str ( e )) return e","title":"get_bolt11()"},{"location":"reference/#pylnbits.user_wallet.UserWallet.get_decoded","text":"POST /api/v1/payments/decode Body (application/json) {\"data\": } Returns 200 (application/json) Headers: invoice key Source code in pylnbits/user_wallet.py 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 async def get_decoded ( self , bolt11 : str ): \"\"\" POST /api/v1/payments/decode Body (application/json) {\"data\": <string>} Returns 200 (application/json) Headers: invoice key \"\"\" try : decode_url = self . _lnbits_url + self . paypath + \"/decode\" payload = { \"data\" : bolt11 } # res = requests.post(decode_url, json=payload, headers=self._invoice_headers) res = await post_url ( self . _session , path = decode_url , body = payload , headers = self . _invoice_headers ) return res except Exception as e : print ( \"Exception in get_decoded() \" , e ) return e","title":"get_decoded()"},{"location":"reference/#pylnbits.user_wallet.UserWallet.get_invoices","text":"Get invoices (incoming or outgoing) GET /api/v1/payments Headers: invoice key Returns 200 OK (application/json) [{ }] Source code in pylnbits/user_wallet.py 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 async def get_invoices ( self ): \"\"\" Get invoices (incoming or outgoing) GET /api/v1/payments Headers: invoice key Returns 200 OK (application/json) [{<invoices>}] \"\"\" try : # ppath = \"/api/v1/payments/\" path = self . _lnbits_url + self . paypath res = await get_url ( self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e","title":"get_invoices()"},{"location":"reference/#pylnbits.user_wallet.UserWallet.get_invoicesbymemo","text":"GET /api/v1/payments?memo= Returns 200 OK (application/json) [{ }] Headers: invoice key Source code in pylnbits/user_wallet.py 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 async def get_invoicesbymemo ( self , memo : str ): \"\"\" GET /api/v1/payments?memo=<memo> Returns 200 OK (application/json) [{<invoices>}] Headers: invoice key \"\"\" try : path = self . _lnbits_url + self . paypath + \"?memo=\" + memo res = await get_url ( self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e","title":"get_invoicesbymemo()"},{"location":"reference/#pylnbits.user_wallet.UserWallet.get_payhash","text":"Only returns the payment hash not entire decoded invoice Source code in pylnbits/user_wallet.py 180 181 182 183 184 185 186 187 188 189 190 191 async def get_payhash ( self , bolt11 : str ): \"\"\" Only returns the payment hash not entire decoded invoice \"\"\" res = await self . get_decoded ( bolt11 ) decoded = res . json () # print(decoded) if \"payment_hash\" in decoded : payhash = decoded [ \"payment_hash\" ] return payhash else : return None","title":"get_payhash()"},{"location":"reference/#pylnbits.user_wallet.UserWallet.get_payurl","text":"Construct Lnurlp link from email address provided. Source code in pylnbits/user_wallet.py 231 232 233 234 235 236 237 238 239 240 241 242 243 def get_payurl ( self , email : str ): \"\"\" Construct Lnurlp link from email address provided. \"\"\" try : parts = email . split ( \"@\" ) domain = parts [ 1 ] username = parts [ 0 ] transform_url = \"http://\" + domain + \"/.well-known/lnurlp/\" + username print ( \"Transformed URl: \" + transform_url ) return transform_url except Exception as e : print ( \"Exception, possibly malformed LN Address: \" + str ( e ))","title":"get_payurl()"},{"location":"reference/#pylnbits.user_wallet.UserWallet.get_wallet_details","text":"GET /api/v1/wallet Headers {\"X-Api-Key\": \"Invoice key\"} Returns 200 OK (application/json) {\"id\": , \"name\": , \"balance\": } Source code in pylnbits/user_wallet.py 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 async def get_wallet_details ( self ): \"\"\" GET /api/v1/wallet Headers {\"X-Api-Key\": \"Invoice key\"} Returns 200 OK (application/json) {\"id\": <string>, \"name\": <string>, \"balance\": <int>} \"\"\" try : # upath = \"/api/v1/wallet\" upath = self . walletpath path = self . _lnbits_url + upath res = await get_url ( self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e","title":"get_wallet_details()"},{"location":"reference/#pylnbits.user_wallet.UserWallet.pay_invoice","text":"Pay an invoice (outgoing) POST /api/v1/payments Headers {\"X-Api-Key\": \"Admin key\"} Body (application/json) {\"out\": true, \"bolt11\": } Returns 201 CREATED (application/json) {\"payment_hash\": } curl -X POST https://bits.bitcoin.org.hk/api/v1/payments -d '{\"out\": true, \"bolt11\": }' -H \"X-Api-Key: b811bd2580a0431c96d3c4......\" # TODO: needs admin key! -H \"Content-type: application/json\" Source code in pylnbits/user_wallet.py 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 async def pay_invoice ( self , direction : bool , bolt11 : str ): \"\"\" Pay an invoice (outgoing) POST /api/v1/payments Headers {\"X-Api-Key\": \"Admin key\"} Body (application/json) {\"out\": true, \"bolt11\": <string>} Returns 201 CREATED (application/json) {\"payment_hash\": <string>} curl -X POST https://bits.bitcoin.org.hk/api/v1/payments -d '{\"out\": true, \"bolt11\": <string>}' -H \"X-Api-Key: b811bd2580a0431c96d3c4......\" # TODO: needs admin key! -H \"Content-type: application/json\" \"\"\" try : # upath = \"/api/v1/payments\" path = self . _lnbits_url + self . paypath body = { \"out\" : direction , \"bolt11\" : bolt11 } j = json . dumps ( body ) # print(f\"body: {j}\") res = await post_url ( self . _session , path = path , headers = self . _admin_headers , body = j ) return res except Exception as e : logger . info ( e ) return e","title":"pay_invoice()"},{"location":"reference/#pylnbits.user_manager.UserManager","text":"Source code in pylnbits/user_manager.pyclass UserManager : def __init__ ( self , config , session : ClientSession = None ): \"\"\"__init__ Initializes a UserManager extension via API \"\"\" self . _config = config self . _lnbits_url = config . lnbits_url self . _invoice_headers = config . invoice_headers () self . _admin_headers = config . admin_headers () self . _session = session # returns JSON list of users async def get_users ( self ): \"\"\" get users managed by the User Manager Extension Returns: JSON list of users \"\"\" try : upath = \"/usermanager/api/v1/users\" path = self . _lnbits_url + upath res = await get_url ( session = self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e # returns single JSON user based on user_id async def get_user ( self , user_id ): \"\"\" gets a user based on user_id Returns a single JSON based on used_id \"\"\" try : upath = \"/usermanager/api/v1/users/\" + user_id path = self . _lnbits_url + upath res = await get_url ( session = self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e # returns JSON wallet data async def get_wallets ( self , user_id ): \"\"\"\" gets wallets based on user_id Returns JSON of wallet data \"\"\" try : wpath = \"/usermanager/api/v1/wallets/\" + user_id path = self . _lnbits_url + wpath res = await get_url ( session = self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e # returns JSON of wallet transactions async def get_tx ( self , wallet_id ): \"\"\" Gets all transactions in a wallet Returns JSON of Wallet Transactions \"\"\" try : tpath = \"/usermanager/api/v1/wallets\" + wallet_id path = self . _lnbits_url + tpath res = await get_url ( session = self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e async def post_user_initial ( self , admin_id , user_name , wallet_name ): \"\"\" creates a user and an initial wallet \"\"\" try : tpath = \"/usermanager/api/v1/users\" path = self . _lnbits_url + tpath body = { \"admin_id\" : admin_id , \"user_name\" : user_name , \"wallet_name\" : wallet_name } jbody = json . dumps ( body ) res = await post_url ( session = self . _session , path = path , headers = self . _invoice_headers , body = jbody ) return res except Exception as e : logger . info ( e ) return e # body = {\"user_id\": <string>, \"wallet_name\": <string>, \"admin_id\": <string>} # returns 201 CREATED # {\"id\": <string>, \"admin\": <string>, \"name\": <string>, # \"user\": <string>, \"adminkey\": <string>, \"inkey\": <string>} async def post_wallet ( self , user_id , wallet_name , admin_id ): \"\"\" Post_wallet returns api keys related to wallet Returns {\"id\": <string>, \"admin\": <string>, \"name\": <string>, \"user\": <string>, \"adminkey\": <string>, \"inkey\": <string>} \"\"\" try : tpath = \"/usermanager/api/v1/wallets\" path = self . _lnbits_url + tpath body = { \"user_id\" : user_id , \"wallet_name\" : wallet_name , \"admin_id\" : admin_id } jbody = json . dumps ( body ) res = await post_url ( session = self . _session , path = path , headers = self . _invoice_headers , body = jbody ) return res except Exception as e : logger . info ( e ) return e async def delete_user ( self , user_id ): \"\"\" Deletes a user based on user_id \"\"\" try : tpath = \"/usermanager/api/v1/users/\" + user_id path = self . _lnbits_url + tpath res = await delete_url ( session = self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e async def delete_wallet ( self , wallet_id ): \"\"\" Delete a wallet based on wallet_id \"\"\" try : tpath = \"/usermanager/api/v1/wallets/\" + wallet_id path = self . _lnbits_url + tpath res = await delete_url ( session = self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e # temporarily use this to activate extensions: # https://yourdomain.com/extensions?usr=89.....&enable=lnurlp # unclear why curl doesn't work ? async def post_activate_ext ( self , user_id : str , extension : str , active : int ): \"\"\" activates an extension for a user created by User Manager Extension \"\"\" try : tpath = \"/usermanager/api/v1/extensions\" path = self . _lnbits_url + tpath body = { \"userid\" : user_id , \"extension\" : extension , \"active\" : active } jbody = json . dumps ( body ) res = await post_url ( session = self . _session , path = path , headers = self . _invoice_headers , body = jbody ) return res except Exception as e : logger . info ( e ) return e","title":"UserManager"},{"location":"reference/#pylnbits.user_manager.UserManager.__init__","text":"init Initializes a UserManager extension via API Source code in pylnbits/user_manager.py 31 32 33 34 35 36 37 38 39 40 41 def __init__ ( self , config , session : ClientSession = None ): \"\"\"__init__ Initializes a UserManager extension via API \"\"\" self . _config = config self . _lnbits_url = config . lnbits_url self . _invoice_headers = config . invoice_headers () self . _admin_headers = config . admin_headers () self . _session = session","title":"__init__()"},{"location":"reference/#pylnbits.user_manager.UserManager.delete_user","text":"Deletes a user based on user_id Source code in pylnbits/user_manager.py 144 145 146 147 148 149 150 151 152 153 154 155 async def delete_user ( self , user_id ): \"\"\" Deletes a user based on user_id \"\"\" try : tpath = \"/usermanager/api/v1/users/\" + user_id path = self . _lnbits_url + tpath res = await delete_url ( session = self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e","title":"delete_user()"},{"location":"reference/#pylnbits.user_manager.UserManager.delete_wallet","text":"Delete a wallet based on wallet_id Source code in pylnbits/user_manager.py 157 158 159 160 161 162 163 164 165 166 167 168 async def delete_wallet ( self , wallet_id ): \"\"\" Delete a wallet based on wallet_id \"\"\" try : tpath = \"/usermanager/api/v1/wallets/\" + wallet_id path = self . _lnbits_url + tpath res = await delete_url ( session = self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e","title":"delete_wallet()"},{"location":"reference/#pylnbits.user_manager.UserManager.get_tx","text":"Gets all transactions in a wallet Returns JSON of Wallet Transactions Source code in pylnbits/user_manager.py 93 94 95 96 97 98 99 100 101 102 103 104 105 106 async def get_tx ( self , wallet_id ): \"\"\" Gets all transactions in a wallet Returns JSON of Wallet Transactions \"\"\" try : tpath = \"/usermanager/api/v1/wallets\" + wallet_id path = self . _lnbits_url + tpath res = await get_url ( session = self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e","title":"get_tx()"},{"location":"reference/#pylnbits.user_manager.UserManager.get_user","text":"gets a user based on user_id Returns a single JSON based on used_id Source code in pylnbits/user_manager.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 async def get_user ( self , user_id ): \"\"\" gets a user based on user_id Returns a single JSON based on used_id \"\"\" try : upath = \"/usermanager/api/v1/users/\" + user_id path = self . _lnbits_url + upath res = await get_url ( session = self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e","title":"get_user()"},{"location":"reference/#pylnbits.user_manager.UserManager.get_users","text":"get users managed by the User Manager Extension Returns: JSON list of users Source code in pylnbits/user_manager.py 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 async def get_users ( self ): \"\"\" get users managed by the User Manager Extension Returns: JSON list of users \"\"\" try : upath = \"/usermanager/api/v1/users\" path = self . _lnbits_url + upath res = await get_url ( session = self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e","title":"get_users()"},{"location":"reference/#pylnbits.user_manager.UserManager.get_wallets","text":"\" gets wallets based on user_id Returns JSON of wallet data Source code in pylnbits/user_manager.py 77 78 79 80 81 82 83 84 85 86 87 88 89 90 async def get_wallets ( self , user_id ): \"\"\"\" gets wallets based on user_id Returns JSON of wallet data \"\"\" try : wpath = \"/usermanager/api/v1/wallets/\" + user_id path = self . _lnbits_url + wpath res = await get_url ( session = self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e","title":"get_wallets()"},{"location":"reference/#pylnbits.user_manager.UserManager.post_activate_ext","text":"activates an extension for a user created by User Manager Extension Source code in pylnbits/user_manager.py 173 174 175 176 177 178 179 180 181 182 183 184 185 186 async def post_activate_ext ( self , user_id : str , extension : str , active : int ): \"\"\" activates an extension for a user created by User Manager Extension \"\"\" try : tpath = \"/usermanager/api/v1/extensions\" path = self . _lnbits_url + tpath body = { \"userid\" : user_id , \"extension\" : extension , \"active\" : active } jbody = json . dumps ( body ) res = await post_url ( session = self . _session , path = path , headers = self . _invoice_headers , body = jbody ) return res except Exception as e : logger . info ( e ) return e","title":"post_activate_ext()"},{"location":"reference/#pylnbits.user_manager.UserManager.post_user_initial","text":"creates a user and an initial wallet Source code in pylnbits/user_manager.py 108 109 110 111 112 113 114 115 116 117 118 119 120 121 async def post_user_initial ( self , admin_id , user_name , wallet_name ): \"\"\" creates a user and an initial wallet \"\"\" try : tpath = \"/usermanager/api/v1/users\" path = self . _lnbits_url + tpath body = { \"admin_id\" : admin_id , \"user_name\" : user_name , \"wallet_name\" : wallet_name } jbody = json . dumps ( body ) res = await post_url ( session = self . _session , path = path , headers = self . _invoice_headers , body = jbody ) return res except Exception as e : logger . info ( e ) return e","title":"post_user_initial()"},{"location":"reference/#pylnbits.user_manager.UserManager.post_wallet","text":"Post_wallet returns api keys related to wallet Returns {\"id\": , \"admin\": , \"name\": , \"user\": , \"adminkey\": , \"inkey\": } Source code in pylnbits/user_manager.py 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 async def post_wallet ( self , user_id , wallet_name , admin_id ): \"\"\" Post_wallet returns api keys related to wallet Returns {\"id\": <string>, \"admin\": <string>, \"name\": <string>, \"user\": <string>, \"adminkey\": <string>, \"inkey\": <string>} \"\"\" try : tpath = \"/usermanager/api/v1/wallets\" path = self . _lnbits_url + tpath body = { \"user_id\" : user_id , \"wallet_name\" : wallet_name , \"admin_id\" : admin_id } jbody = json . dumps ( body ) res = await post_url ( session = self . _session , path = path , headers = self . _invoice_headers , body = jbody ) return res except Exception as e : logger . info ( e ) return e","title":"post_wallet()"},{"location":"reference/#pylnbits.lnurl_p.LnurlPay","text":"Source code in pylnbits/lnurl_p.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 class LnurlPay : def __init__ ( self , config , session : ClientSession = None ): self . _config = config self . _lnbits_url = config . lnbits_url self . _invoice_headers = config . invoice_headers () self . _admin_headers = config . admin_headers () self . _session = session self . _upath = \"/lnurlp/api/v1/links\" async def list_paylinks ( self ): \"\"\" GET /lnurlp/api/v1/links Returns list pay links. Returns 200 OK app/json [<pay_link_object>, ...] \"\"\" try : path = self . _lnbits_url + self . _upath res = await get_url ( self . _session , path , self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e async def get_paylink ( self , pay_id : str ): \"\"\" GET /lnurlp/api/v1/links/<pay_id> Returns list pay links. Returns 200 OK app/json {\"lnurl\": <string>} \"\"\" try : path = self . _lnbits_url + self . _upath + \"/\" + pay_id res = await get_url ( self . _session , path , self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e async def create_paylink ( self , body : str ): \"\"\" POST /lnurlp/api/v1/links Body (application/json) {\"description\": <string> \"amount\": <integer> \"max\": <integer> \"min\": <integer> \"comment_chars\": <integer>} Returns Returns 201 CREATED app/json {\"lnurl\": <string>} \"\"\" try : path = self . _lnbits_url + self . _upath res = await post_url ( self . _session , path = path , headers = self . _admin_headers , body = json . dumps ( body )) return res except Exception as e : logger . info ( e ) return e async def update_paylink ( self , pay_id : str , body : str ): \"\"\" PUT /lnurlp/api/v1/links/<pay_id> Body (application/json) {\"description\": <string> \"amount\": <integer>} Returns Returns 200 OK app/json {\"lnurl\": <string>} \"\"\" try : path = self . _lnbits_url + self . _upath + \"/\" + pay_id res = await put_url ( self . _session , path = path , headers = self . _admin_headers , body = json . dumps ( body )) return res except Exception as e : logger . info ( e ) return e async def delete_paylink ( self , pay_id : str ): \"\"\" DELETE /lnurlp/api/v1/links/<pay_id> Returns Returns 204 NO CONTENT \"\"\" try : path = self . _lnbits_url + self . _upath + \"/\" + pay_id res = await delete_url ( self . _session , path = path , headers = self . _admin_headers ) return res except Exception as e : logger . info ( e ) return e","title":"LnurlPay"},{"location":"reference/#pylnbits.lnurl_p.LnurlPay.create_paylink","text":"POST /lnurlp/api/v1/links Body (application/json) {\"description\": \"amount\": \"max\": \"min\": \"comment_chars\": } Returns Returns 201 CREATED app/json {\"lnurl\": } Source code in pylnbits/lnurl_p.py 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 async def create_paylink ( self , body : str ): \"\"\" POST /lnurlp/api/v1/links Body (application/json) {\"description\": <string> \"amount\": <integer> \"max\": <integer> \"min\": <integer> \"comment_chars\": <integer>} Returns Returns 201 CREATED app/json {\"lnurl\": <string>} \"\"\" try : path = self . _lnbits_url + self . _upath res = await post_url ( self . _session , path = path , headers = self . _admin_headers , body = json . dumps ( body )) return res except Exception as e : logger . info ( e ) return e","title":"create_paylink()"},{"location":"reference/#pylnbits.lnurl_p.LnurlPay.delete_paylink","text":"DELETE /lnurlp/api/v1/links/ Returns Returns 204 NO CONTENT Source code in pylnbits/lnurl_p.py 99 100 101 102 103 104 105 106 107 108 109 110 111 async def delete_paylink ( self , pay_id : str ): \"\"\" DELETE /lnurlp/api/v1/links/<pay_id> Returns Returns 204 NO CONTENT \"\"\" try : path = self . _lnbits_url + self . _upath + \"/\" + pay_id res = await delete_url ( self . _session , path = path , headers = self . _admin_headers ) return res except Exception as e : logger . info ( e ) return e","title":"delete_paylink()"},{"location":"reference/#pylnbits.lnurl_p.LnurlPay.get_paylink","text":"GET /lnurlp/api/v1/links/ Returns list pay links. Returns 200 OK app/json {\"lnurl\": } Source code in pylnbits/lnurl_p.py 48 49 50 51 52 53 54 55 56 57 58 59 60 async def get_paylink ( self , pay_id : str ): \"\"\" GET /lnurlp/api/v1/links/<pay_id> Returns list pay links. Returns 200 OK app/json {\"lnurl\": <string>} \"\"\" try : path = self . _lnbits_url + self . _upath + \"/\" + pay_id res = await get_url ( self . _session , path , self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e","title":"get_paylink()"},{"location":"reference/#pylnbits.lnurl_p.LnurlPay.list_paylinks","text":"GET /lnurlp/api/v1/links Returns list pay links. Returns 200 OK app/json [ , ...] Source code in pylnbits/lnurl_p.py 35 36 37 38 39 40 41 42 43 44 45 46 async def list_paylinks ( self ): \"\"\" GET /lnurlp/api/v1/links Returns list pay links. Returns 200 OK app/json [<pay_link_object>, ...] \"\"\" try : path = self . _lnbits_url + self . _upath res = await get_url ( self . _session , path , self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e","title":"list_paylinks()"},{"location":"reference/#pylnbits.lnurl_p.LnurlPay.update_paylink","text":"PUT /lnurlp/api/v1/links/ Body (application/json) {\"description\": \"amount\": } Returns Returns 200 OK app/json {\"lnurl\": } Source code in pylnbits/lnurl_p.py 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 async def update_paylink ( self , pay_id : str , body : str ): \"\"\" PUT /lnurlp/api/v1/links/<pay_id> Body (application/json) {\"description\": <string> \"amount\": <integer>} Returns Returns 200 OK app/json {\"lnurl\": <string>} \"\"\" try : path = self . _lnbits_url + self . _upath + \"/\" + pay_id res = await put_url ( self . _session , path = path , headers = self . _admin_headers , body = json . dumps ( body )) return res except Exception as e : logger . info ( e ) return e","title":"update_paylink()"},{"location":"reference/#pylnbits.lnurl_w.LnurlWithdraw","text":"Source code in pylnbits/lnurl_w.pyclass LnurlWithdraw : def __init__ ( self , config , session : ClientSession = None ): self . _config = config self . _lnbits_url = config . lnbits_url self . _invoice_headers = config . invoice_headers () self . _admin_headers = config . admin_headers () self . _session = session self . _upath = \"/withdraw/api/v1/links\" # List withdraw links async def list_withdrawlinks ( self ): \"\"\" GET /withdraw/api/v1/links Returns list withdraw links. Returns 200 OK app/json [<withdraw_link_object>, ...] \"\"\" try : path = self . _lnbits_url + self . _upath res = await get_url ( self . _session , path , self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e # Get a withdraw link async def get_withdrawlink ( self , withdraw_id : str ): \"\"\" GET /withdraw/api/v1/links/<pay_id> Returns list pay links. Returns 200 OK app/json {\"lnurl\": <string>} \"\"\" try : path = self . _lnbits_url + self . _upath + \"/\" + withdraw_id # print(f\"GET WITHDRAWL LINK PATH: {path}\") res = await get_url_resp ( self . _session , path , self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e # Create a withdraw link async def create_withdrawlink ( self , body : str ): \"\"\" POST /withdraw/api/v1/links Body (application/json) {\"title\": <string>, \"min_withdrawable\": <integer>, \"max_withdrawable\": <integer>, \"uses\": <integer>, \"wait_time\": <integer>, \"is_unique\": <boolean>} Returns Returns 201 CREATED app/json {\"id\": < string> , \"is_unique\": <boolean>, \"k1\": <str>, \"lnurl\": <string>, \"max_withdrawable\": <int>, \"min_withdrawable\": <int>, \"number\": <int>, \"open_time\": <int>, \"title\": <str>, \"unique_hash\": <str>, \"used\": <int>, \"uses\": <int>, \"usescsv\": <str>, \"wait_time\": <int>, \"wallet\": <str> \"} Batch Print Page link: https://<lnbits-url>/withdraw/print/<id> Shareable link for single QR: https://<lnbits-url>/withdraw/<id> \"\"\" try : path = self . _lnbits_url + self . _upath res = await post_url ( self . _session , path = path , headers = self . _admin_headers , body = json . dumps ( body )) return res except Exception as e : logger . info ( e ) return str ( e ) # Update a withdraw link async def update_withdrawlink ( self , withdraw_id : str , body : str ): \"\"\" PUT /withdraw/api/v1/links/<pay_id> Body (application/json) {\"title\": <string>, \"min_withdrawable\": <integer>, \"max_withdrawable\": <integer>, \"uses\": <integer>, \"wait_time\": <integer>, \"is_unique\": <boolean>} Returns Returns 200 OK app/json {\"lnurl\": <string>} \"\"\" try : path = self . _lnbits_url + self . _upath + \"/\" + withdraw_id res = await put_url ( self . _session , path = path , headers = self . _admin_headers , body = json . dumps ( body )) return res except Exception as e : logger . info ( e ) return e # Delete a withdraw link async def delete_withdrawlink ( self , withdraw_id : str ): \"\"\" DELETE /withdraw/api/v1/links/<withdraw_id> Returns Returns 204 NO CONTENT \"\"\" try : path = self . _lnbits_url + self . _upath + \"/\" + withdraw_id print ( path ) res = await delete_url ( self . _session , path = path , headers = self . _admin_headers ) return res except Exception as e : logger . info ( e ) return e async def get_hash_check ( self , hash : str , lnurl_id : str ): \"\"\" GET /withdraw/api/v1/links/<the_hash>/<lnurl_id> Headers {\"X-Api-Key\": <invoice_key>} Returns 201 CREATED (application/json) {\"status\": <bool>} \"\"\" try : upath = \"/withdraw/api/v1/links/\" path = self . _lnbits_url + upath + hash + \"/\" + lnurl_id res = await get_url ( self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e async def get_image_embed ( self , lnurl_id : str ): \"\"\" GET /withdraw/img/<lnurl_id> \"\"\" try : upath = \"/withdraw/img/\" path = self . _lnbits_url + upath + lnurl_id res = await get_url_resp ( self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e","title":"LnurlWithdraw"},{"location":"reference/#pylnbits.lnurl_w.LnurlWithdraw.create_withdrawlink","text":"POST /withdraw/api/v1/links Body (application/json) {\"title\": , \"min_withdrawable\": , \"max_withdrawable\": , \"uses\": , \"wait_time\": , \"is_unique\": } Returns Returns 201 CREATED app/json {\"id\": < string> , \"is_unique\": , \"k1\": , \"lnurl\": , \"max_withdrawable\": , \"min_withdrawable\": , \"number\": , \"open_time\": , \"title\": , \"unique_hash\": , \"used\": , \"uses\": , \"usescsv\": , \"wait_time\": , \"wallet\": \"} Batch Print Page link: https:// /withdraw/print/ Shareable link for single QR: https:// /withdraw/ Source code in pylnbits/lnurl_w.py 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 async def create_withdrawlink ( self , body : str ): \"\"\" POST /withdraw/api/v1/links Body (application/json) {\"title\": <string>, \"min_withdrawable\": <integer>, \"max_withdrawable\": <integer>, \"uses\": <integer>, \"wait_time\": <integer>, \"is_unique\": <boolean>} Returns Returns 201 CREATED app/json {\"id\": < string> , \"is_unique\": <boolean>, \"k1\": <str>, \"lnurl\": <string>, \"max_withdrawable\": <int>, \"min_withdrawable\": <int>, \"number\": <int>, \"open_time\": <int>, \"title\": <str>, \"unique_hash\": <str>, \"used\": <int>, \"uses\": <int>, \"usescsv\": <str>, \"wait_time\": <int>, \"wallet\": <str> \"} Batch Print Page link: https://<lnbits-url>/withdraw/print/<id> Shareable link for single QR: https://<lnbits-url>/withdraw/<id> \"\"\" try : path = self . _lnbits_url + self . _upath res = await post_url ( self . _session , path = path , headers = self . _admin_headers , body = json . dumps ( body )) return res except Exception as e : logger . info ( e ) return str ( e )","title":"create_withdrawlink()"},{"location":"reference/#pylnbits.lnurl_w.LnurlWithdraw.delete_withdrawlink","text":"DELETE /withdraw/api/v1/links/ Returns Returns 204 NO CONTENT Source code in pylnbits/lnurl_w.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 async def delete_withdrawlink ( self , withdraw_id : str ): \"\"\" DELETE /withdraw/api/v1/links/<withdraw_id> Returns Returns 204 NO CONTENT \"\"\" try : path = self . _lnbits_url + self . _upath + \"/\" + withdraw_id print ( path ) res = await delete_url ( self . _session , path = path , headers = self . _admin_headers ) return res except Exception as e : logger . info ( e ) return e","title":"delete_withdrawlink()"},{"location":"reference/#pylnbits.lnurl_w.LnurlWithdraw.get_hash_check","text":"GET /withdraw/api/v1/links/ / Headers {\"X-Api-Key\": } Returns 201 CREATED (application/json) {\"status\": } Source code in pylnbits/lnurl_w.py 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 async def get_hash_check ( self , hash : str , lnurl_id : str ): \"\"\" GET /withdraw/api/v1/links/<the_hash>/<lnurl_id> Headers {\"X-Api-Key\": <invoice_key>} Returns 201 CREATED (application/json) {\"status\": <bool>} \"\"\" try : upath = \"/withdraw/api/v1/links/\" path = self . _lnbits_url + upath + hash + \"/\" + lnurl_id res = await get_url ( self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e","title":"get_hash_check()"},{"location":"reference/#pylnbits.lnurl_w.LnurlWithdraw.get_image_embed","text":"GET /withdraw/img/ Source code in pylnbits/lnurl_w.py 160 161 162 163 164 165 166 167 168 169 170 171 async def get_image_embed ( self , lnurl_id : str ): \"\"\" GET /withdraw/img/<lnurl_id> \"\"\" try : upath = \"/withdraw/img/\" path = self . _lnbits_url + upath + lnurl_id res = await get_url_resp ( self . _session , path = path , headers = self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e","title":"get_image_embed()"},{"location":"reference/#pylnbits.lnurl_w.LnurlWithdraw.get_withdrawlink","text":"GET /withdraw/api/v1/links/ Returns list pay links. Returns 200 OK app/json {\"lnurl\": } Source code in pylnbits/lnurl_w.py 55 56 57 58 59 60 61 62 63 64 65 66 67 68 async def get_withdrawlink ( self , withdraw_id : str ): \"\"\" GET /withdraw/api/v1/links/<pay_id> Returns list pay links. Returns 200 OK app/json {\"lnurl\": <string>} \"\"\" try : path = self . _lnbits_url + self . _upath + \"/\" + withdraw_id # print(f\"GET WITHDRAWL LINK PATH: {path}\") res = await get_url_resp ( self . _session , path , self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e","title":"get_withdrawlink()"},{"location":"reference/#pylnbits.lnurl_w.LnurlWithdraw.list_withdrawlinks","text":"GET /withdraw/api/v1/links Returns list withdraw links. Returns 200 OK app/json [ , ...] Source code in pylnbits/lnurl_w.py 40 41 42 43 44 45 46 47 48 49 50 51 async def list_withdrawlinks ( self ): \"\"\" GET /withdraw/api/v1/links Returns list withdraw links. Returns 200 OK app/json [<withdraw_link_object>, ...] \"\"\" try : path = self . _lnbits_url + self . _upath res = await get_url ( self . _session , path , self . _invoice_headers ) return res except Exception as e : logger . info ( e ) return e","title":"list_withdrawlinks()"},{"location":"reference/#pylnbits.lnurl_w.LnurlWithdraw.update_withdrawlink","text":"PUT /withdraw/api/v1/links/ Body (application/json) {\"title\": , \"min_withdrawable\": , \"max_withdrawable\": , \"uses\": , \"wait_time\": , \"is_unique\": } Returns Returns 200 OK app/json {\"lnurl\": } Source code in pylnbits/lnurl_w.py 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 async def update_withdrawlink ( self , withdraw_id : str , body : str ): \"\"\" PUT /withdraw/api/v1/links/<pay_id> Body (application/json) {\"title\": <string>, \"min_withdrawable\": <integer>, \"max_withdrawable\": <integer>, \"uses\": <integer>, \"wait_time\": <integer>, \"is_unique\": <boolean>} Returns Returns 200 OK app/json {\"lnurl\": <string>} \"\"\" try : path = self . _lnbits_url + self . _upath + \"/\" + withdraw_id res = await put_url ( self . _session , path = path , headers = self . _admin_headers , body = json . dumps ( body )) return res except Exception as e : logger . info ( e ) return e Rest API methods for LNbits LndHub Extension Integrates with Blue Wallet, Zeus","title":"update_withdrawlink()"},{"location":"reference/#pylnbits.lndhub.LndHub","text":"Source code in pylnbits/lndhub.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class LndHub : def __init__ ( self , config ): \"\"\"__init__ \"\"\" self . _invoice_key = config . in_key self . _admin_key = config . admin_key self . _lnbits_url = config . lnbits_url def admin ( self ): \"\"\" create admin url for LNDHub Returns lndhub url \"\"\" url = \"lndhub://admin:\" + self . _admin_key + \"@\" + self . _lnbits_url + \"/lndhub/ext/\" return url def invoice ( self ): \"\"\" create invoice url for LNDHub Returns lndhub url \"\"\" url = \"lndhub://invoice:\" + self . _invoice_key + \"@\" + self . _lnbits_url + \"/lndhub/ext/\" return url","title":"LndHub"},{"location":"reference/#pylnbits.lndhub.LndHub.__init__","text":"init Source code in pylnbits/lndhub.py 10 11 12 13 14 15 def __init__ ( self , config ): \"\"\"__init__ \"\"\" self . _invoice_key = config . in_key self . _admin_key = config . admin_key self . _lnbits_url = config . lnbits_url","title":"__init__()"},{"location":"reference/#pylnbits.lndhub.LndHub.admin","text":"create admin url for LNDHub Returns lndhub url Source code in pylnbits/lndhub.py 17 18 19 20 21 22 23 24 def admin ( self ): \"\"\" create admin url for LNDHub Returns lndhub url \"\"\" url = \"lndhub://admin:\" + self . _admin_key + \"@\" + self . _lnbits_url + \"/lndhub/ext/\" return url","title":"admin()"},{"location":"reference/#pylnbits.lndhub.LndHub.invoice","text":"create invoice url for LNDHub Returns lndhub url Source code in pylnbits/lndhub.py 26 27 28 29 30 31 32 33 def invoice ( self ): \"\"\" create invoice url for LNDHub Returns lndhub url \"\"\" url = \"lndhub://invoice:\" + self . _invoice_key + \"@\" + self . _lnbits_url + \"/lndhub/ext/\" return url","title":"invoice()"},{"location":"reference/#project-layout","text":"Source: https://github.com/lightningames/pylnbits mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. config_sample.yml pylnbits/ __init__.py config.py lndhub.py lnurl_p.py lnurl_w.py user_manager.py user_wallet.py utils.py tests/ __init__.py test_lndhub.py test_lnurlp.py test_lnurlw.py test_usermanager.py test_userwallet.py","title":"Project layout"}]}